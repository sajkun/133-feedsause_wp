  var is_mobile = {
    Android: function() {
        return navigator.userAgent.match(/Android/i);
    },
    BlackBerry: function() {
        return navigator.userAgent.match(/BlackBerry/i);
    },
    iOS: function() {
        return navigator.userAgent.match(/iPhone|iPad|iPod/i);
    },
    Opera: function() {
        return navigator.userAgent.match(/Opera Mini/i);
    },
    Windows: function() {
        return navigator.userAgent.match(/IEMobile/i);
    },

    any: function() {
        return (is_mobile.Android() || is_mobile.BlackBerry() || is_mobile.iOS() || is_mobile.Opera() || is_mobile.Windows());
    },

    anyphone: function(){
        return (is_mobile.any && (jQuery(window).width()<=768));
    }
  };
var Cookie =
{
   set: function(name, value, days)
   {
      var domain, domainParts, date, expires, host;

      if (days)
      {
         date = new Date();
         date.setTime(date.getTime()+(days*24*60*60*1000));
         expires = "; expires="+date.toGMTString();
      }
      else
      {
         expires = "";
      }

      host = location.host;
      if (host.split('.').length === 1)
      {
         // no "." in a domain - it's localhost or something similar
         document.cookie = name+"="+value+expires+"; path=/";
      }
      else
      {
         // Remember the cookie on all subdomains.
          //
         // Start with trying to set cookie to the top domain.
         // (example: if user is on foo.com, try to set
         //  cookie to domain ".com")
         //
         // If the cookie will not be set, it means ".com"
         // is a top level domain and we need to
         // set the cookie to ".foo.com"
         domainParts = host.split('.');
         domainParts.shift();
         domain = '.'+domainParts.join('.');

         document.cookie = name+"="+value+expires+"; path=/; domain="+domain;

         // check if cookie was successfuly set to the given domain
         // (otherwise it was a Top-Level Domain)
         if (Cookie.get(name) == null || Cookie.get(name) != value)
         {
            // append "." to current domain
            domain = '.'+host;
            document.cookie = name+"="+value+expires+"; path=/; domain="+domain;
         }
      }
   },

   get: function(name)
   {
      var nameEQ = name + "=";
      var ca = document.cookie.split(';');
      for (var i=0; i < ca.length; i++)
      {
         var c = ca[i];
         while (c.charAt(0)==' ')
         {
            c = c.substring(1,c.length);
         }

         if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
      }
      return null;
   },

   erase: function(name)
   {
      Cookie.set(name, '', -1);
   }
};
var popup_address;
var studio_app;
var animation_mixin = {
  methods:{
   beforeEnter: function (el) {
      el.style.opacity = 0
    },

    enter: function (el, done) {
      const width = getComputedStyle(el).width;

      el.style.width = width;
      el.style.position = 'absolute';
      el.style.visibility = 'hidden';
      el.style.height = 'auto';

      const height = getComputedStyle(el).height;

      el.style.width = null;
      el.style.position = null;
      el.style.visibility = null;
      el.style.height = 0;

      getComputedStyle(el).height;

      var delay = el.dataset.index * 150
      setTimeout(function () {
        Velocity(
          el,
          { opacity: 1, height: height },
          { complete: done }
        )
      }, delay)
    },

    leave: function (el, done) {
      var delay = el.dataset.index * 150
      setTimeout(function () {
        Velocity(
          el,
          { opacity: 0, height: 0 },
          { complete: done }
        )
      }, delay)
    },

    enterAfter: function(el){
      el.style.height = 'auto';

      if(typeof(this.update_scroll)!=='undefined'){
        this.update_scroll();
      }
    },

    leaveAfter: function(el){
      if(typeof(this.update_scroll)!=='undefined'){
        this.update_scroll();
      }
    }
  }
}
var select_mixin2 = {
  data: function () {
    return {
      select_name : this._select_name,
      options: '',
      selected:this._selected,
      isExpanded: this._isExpanded,
      isSelected: this._isSelected ? this._isSelected: [],
      isHiddenSelect: true,
      isHiddenImitation: false,
      error : false,
    }
  },

  props:{
    _select_name : String,
    _options: Array,
    _selected: String,
    _isExpanded: String,
    _isSelected: Array,
    _isHiddenSelect: Boolean,
    _isHiddenImitation: Boolean,
  },

  beforeMount:function(){
    this.options = this._options;

    if(this._options){
      var options = strip(this._options);
      switch(typeof(options)){
        case 'object':
          options = Object.values(options);
          this.options = options.filter(function(el){
            return !!el && el != '--Select--' ;
          });
          break
        case 'array':
          this.options = options.filter(function(el){
            return !!el && el != '--Select--';
          });
          break;
        default:
          this.options = options;
          break;
      }
    }
  },

  mounted: function(){
  },

  change: function(){
    this.options = this._options;
  },

  watch:{
    selected: function(){
      this.$el.classList.remove('error');
    },

    _selected: function(val){
      this.selected = val;
    },

    _isHiddenSelect: function(val){
      this.isHiddenSelect = val;
    },

    _isHiddenImitation: function(val){
      this.isHiddenImitation = val;
    },

    _options: function(val){
      this.options = val;
    },
  },

  computed:{
    __options: function(){
      return this.options
    },
  },

  mounted:function(){
    this.change_width();
  },

  directives: {
    'click-outside': {
      bind (el,binding, vnode) {
        const outsideClickEventHandler = event => {
          if(!el.contains(event.target) && el !== event.target){
            binding.value(event);
          }
        }

        el.__outsideClickEventHandler__ = outsideClickEventHandler;
        document.addEventListener("click", outsideClickEventHandler);
      },

      unbind(el) {
        document.removeEventListener("click", el.__outsideClickEventHandler__);
      },
    }
  },

  methods: {
    change: function(){
      this.$emit('update_list', {val: this.selected, name: this.select_name});
    },

    // toggles state of expanded list initation
    expand_select: function(){
      this.isExpanded = 'expanded';
    },

    // toggles select in expanded dropdown
    update_selected_option: function(){
      for(var id in this.options){
        this.isSelected[this.options[id]] = false;
      }

      this.isSelected[this.selected] = true;
    },

    // changes data on option click
    imitate_select_option: function(value){
      this.selected = value;
      this.isExpanded = '';
      this.update_selected_option();
      this.change();
    },

     // closes select
    discard_select:function(){
      this.isExpanded = '';
    },

     // updates options of a select
    update_options: function(options){
      this.options = options;
      this.selected = options[0];
      this.isExpanded = '';
      this.update_selected_option();
    },

    // sets value for a select
    set_value: function(key, value){
      this[key] = value;
      this.$emit('update_list', { val :this.selected, name: this.select_name});

      if(key === 'options'){
        this.change_width();
      }
    },

    change_width:function(){
      var vm = this;
      var select = vm.$el.getElementsByClassName( 'select-imitation__dropdown' )[0].getElementsByClassName( 'select-imitation__list' )[0];

      vm.$el.setAttribute("style", "width: auto");

      Vue.nextTick(function() {
        var width = 0;
        var options = select.getElementsByClassName('element');

        for( var option of options){
          width = Math.max(width, option.offsetWidth);
        }

        width += 90;
        width = Math.max(width, select.offsetWidth);

        var _width = (window.outerWidth < 768)? window.outerWidth - 30 : width;
        vm.$el.setAttribute("style", "width:" + (_width) + 'px');
      });
    },

    resert_width: function(){
      var vm = this;
      vm.$el.setAttribute("style", "width: auto");
    },

    // gets value of a select
    get_value: function(){
      return this.selected;
    },

    // gets name of a select
    get_name: function(){
      return this.select_name;
    },


  },
}
get_set_props = {
  methods: {
    /**
    * update prop
    *
    * @param id - string, name of parameter from data object of this component
    * @param value  - mixed, value to store
    *
    * @return void;
    */
    update_prop: function(id, value){
      this[id] = value;
    },
    /**
    * update prop
    *
    * @param id - string, name of parameter from data object of this component
    * @param value  - mixed, value to store
    *
    * @return void;
    */
    set_prop: function(id, value){
      this[id] = value;
    },

    /**
    * get prop value
    *
    * @param id - string, name of parameter from data object of this component
    *
    * @return mixed - value of propery or 'not found';
    */
    get_prop: function(id){
      return typeof(this[id]) != 'undefined'? this[id] : 'not found';
    },
  },
}
Vue.component('select-imitation', {

  mixins: [select_mixin2],

  beforeMount:function(){
    this.options = this._options;
  },


  watch:{
    _options: function(val){
      this.options = val;
    },
  },

  template: '<div class="select-imitation" v-click-outside="discard_select"  v-bind:class="{ expanded: isExpanded}" > <select v-model="selected" v-on:change="change" v-bind:class="{ hidden: isHiddenSelect}"> <option v-for="data in options" v-bind:value="data">{{data}}</option> </select> <span class="select-imitation__view " v-on:click="expand_select"  v-bind:class="{ hidden: isHiddenImitation}">{{selected}}</span> <span class="select-imitation__arrow" onclick="imitate_select_expand(this)"></span> <div class="select-imitation__dropdown"> <ul class="select-imitation__list"> <li v-for="data in options" v-bind:class="{selected: isSelected[data]}"  v-on:click="imitate_select_option(data)"> <span  class="element">{{data}}</span> </li> </ul> </div> </div>',
})
Vue.component('product-select',{

  data: function(){
    return {
      active: false,
      value: 'Select',
      products: this._products,
    };
  },

  props: ['_products'],

  directives: {
    'click-outside': {
      bind (el,binding, vnode) {
        const outsideClickEventHandler = event => {
          if(!el.contains(event.target) && el !== event.target){
            binding.value(event);
          }
        }

        el.__outsideClickEventHandler__ = outsideClickEventHandler;
        document.addEventListener("click", outsideClickEventHandler);
      },

      unbind(el) {
        document.removeEventListener("click", el.__outsideClickEventHandler__);
      },
    }
  },

  mounted: function(){
    this.products = this._products

    if(this.products.length == 1){
      this.value = this.products[0].title
      this.$emit('change_value', this.value);
      this.$el.classList.remove('error');
    }
  },

  watch: {
    _products: function(val){
      this.products = val;
    },
  },

  methods: {
    discard_select: function(){
      this.active = false;
    },

    set_value: function(val){
      this.$el.classList.remove('error');
      this.value = val;
      this.active = false;
      this.$emit('change_value',val);
    },
  },

  template: `
    <div class="product-list" :class="{expanded: active}" v-on:click.stop="active=true"  v-click-outside="discard_select">
      <span class="product-list__label">Products to Include</span>
      <span class="product-list__value">{{value}}</span>
      <svg class="icon svg-icon-corner-down" v-on:click.stop="active=!active"> <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#svg-icon-corner-down"></use> </svg>

      <div class="product-list__dropdown">
        <ul>
          <li :class="{active: ( 'undefined' != typeof(product.title) && value ==  product.title)}"
            v-on:click.stop ="set_value(product.title)"
            v-for="product, key in products" :key="'prodt-li-'+key">

            <div class="checkbox-cont">
            <svg class="icon svg-icon-tick"> <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#svg-icon-tick"></use> </svg>
            </div>

            {{product.title}}
          </li>
        </ul>
      </div>
    </div>
  `,
});
Vue.component('select-imitation-type', {

  mixins: [select_mixin2],

  beforeMount:function(){
    this.options = this._options;
  },


  mounted: function(){
    if(is_mobile.any()){
      this.isHiddenSelect = false;
      this.isHiddenImitation = true;
    }
  },

  watch:{
    _options: function(val){
      this.options = val;
    },
  },

  methods: {
    // toggles state of expanded list initation
    expand_select: function(){
      this.isExpanded = 'expanded';
      this.error = 0;
    },

    // changes data on option click
    imitate_select_option: function(value,published){
      if(published){
        this.selected = value;
        this.isExpanded = '';
        this.update_selected_option();
        this.change();
      }
    },
  },

  template: '<div class="select-imitation" v-click-outside="discard_select"  v-bind:class="{ expanded: isExpanded, error: error}" > <select v-model="selected" v-on:change="change" v-bind:class="{ hidden: isHiddenSelect}"> <option v-for="data in options" v-bind:value="data.name">{{data.name}}</option> </select> <span class="select-imitation__view " v-on:click="expand_select"  v-bind:class="{ hidden: isHiddenImitation}">{{selected}}</span> <span class="select-imitation__arrow" onclick="imitate_select_expand(this)"></span> <div class="select-imitation__dropdown"> <ul class="select-imitation__list"> <li v-for="data in options" v-bind:class="{selected: isSelected[data], soon: !data.published}"  v-on:click="imitate_select_option(data.name, data.published)"> <span  class="element">{{data.name}} <span class="comming-soon" v-if="!data.published">COMING SOON</span></span> </li> </ul> </div> </div>',
})
Vue.component('select-imitation-country', {

  data: function(){
    return {
      selected_flag: '',
      error: 0,
      search: '',
    };
  },

  mixins: [select_mixin2],

  beforeMount:function(){
    this.options = this._options;
  },


  mounted: function(){
    if(is_mobile.any()){
      this.isHiddenSelect = false;
      this.isHiddenImitation = true;
    }
  },

  computed:{
    _ctr: function(){
      var options = Object.values(this.options);
      console.log(options);

      if(!this.search.length){
        return this.options;
      }

      options = options.filter(e=> {
        return e.name.toLowerCase().indexOf(this.search.toLowerCase()) >= 0;
      });

      return options;
    },
  },

  watch:{
    _options: function(val){
      this.options = val;
    },

    isExpanded: function(val){
      this.search = '';
    }
  },

  methods: {
    // toggles state of expanded list initation
    expand_select: function(){
      this.isExpanded = 'expanded';
      this.error = 0;
    },

    // changes data on option click
    imitate_select_option: function(value){
      if(value.published){
        this.selected = value.name;
        this.selected_flag = value.flag;
        this.isExpanded = '';
        this.update_selected_option();
        this.change();
      }
    },
  },

  template: `
  <div class="select-imitation select-country" v-click-outside="discard_select"  v-bind:class="{ expanded: isExpanded, error: error}" >
    <select v-model="selected" v-on:change="change" v-bind:class="{ hidden: isHiddenSelect}">
      <option v-for="data in options" v-bind:value="data.name">{{data.name}}</option>
    </select>
    <span class="select-imitation__view " v-on:click="expand_select"  v-bind:class="{ hidden: isHiddenImitation}"><img :src="selected_flag"> {{selected}}</span>
    <span class="select-imitation__arrow" onclick="imitate_select_expand(this)"></span>
    <div> <input class="search-country-input input-field" autocomplete="false" v-model="search" placeholder="Type country name"> </div>
     <div class="select-imitation__dropdown">
       <ul class="select-imitation__list">
         <li v-for="data in _ctr" v-bind:class="{selected: isSelected[data], soon: !data.published}"  v-on:click="imitate_select_option(data)">
             <img :src="data.flag">
             <span  class="element">{{data.name}} <span class="comming-soon" v-if="!data.published">COMING SOON</span></span>
         </li>
       </ul>
    </div>
  </div>`,
})
if(document.getElementById('popup_address')){
  var popup_address = new Vue({
    el: '#popup_address',
    mixins: [get_set_props, animation_mixin],
    data: {
        visible: false,
        countries: all_countries_flags,
        country: '',
        city: '',
        line_1: '',
        line_2: '',
        zip: '',
    },

    mounted: function(){
      this.$el.classList.remove('visuallyhidden');
    },

    methods: {
      submit: function(){
        var validated = this.validate();
        var vm = this;

        if(!validated.is_valid){
          setTimeout(function(){
            alert(validated.messages.join('\n'));
          },100);

          return;
        };

        var _keys = [
          'country',
          'zip',
          'city',
          'line_1',
          'line_2',
        ];

        var item = [];

        for(var id of _keys){
          if(this[id]){
            item.push(this[id]);
          }
        }

        studio_app.collection_address = item.join(', ');
        studio_app.addresses.push(item.join(', ') );
        this.visible = false;

      },

      update_data: function(data){
        if(data.val){
          this[data.name] = data.val;
        }
      },

      validate: function(){
        var check = {
          city:   'Enter a City or Town please',
          line_1: 'Enter an address please',
          zip:    'Enter postal code please',
        }

        var validated = {
          is_valid: true,
          messages: [],
        };

        for(var id in check){
          var item = this[id];
            if(!item){
              this.$refs[id].classList.add('error');
              validated.is_valid = false;
              validated.messages.push(check[id]);
            }
          }
        return validated;
      },
    }
  })
}
if(document.getElementById('studio-content')){
 var studio_app = new Vue({
    el : '#studio-content',

    mixins: [animation_mixin],

    data: {
      // prices: {
      //   name: 5,
      //   image: 30,
      //   sizes: 2,
      //   color: 5,
      //   shoot: 9,
      //   fasttrack: 49,
      //   handle: 15,
      // },
      // colors: [
      //   {name: 'Gloss Black',
      //     bg : 'url(assets/images/c/gloss_black.jpg)'},
      //   {name: 'maroon',
      //     bg : '#743e83'},
      //   {name: 'yellow',
      //     bg : '#f5a623'},
      //   {name: 'alpine',
      //     bg : '#ffffff'},
      //   {name: 'rose',
      //      bg: '#f26778'},
      //   {name: 'lagoon',
      //     bg   : '#53b7a0'},
      // ],

      product_types: [
        {name: 'Type Of product', published: 1},
        {name: 'Beauty', published: 1},
        {name: 'Bags', published: 1},
        {name: 'Clothing', published: 0},
      ],

      prices: theme_prices,
      colors: theme_colors,

      // countries: {
      //   uk : {name: 'United Kingdom', published: 1, flag: 'http://localhost/feedsauce/wp-content/themes/133-feedsause_wp/images/flags/United_Kingdom.png'},
      //   us : {name: 'United States', published: 0, flag: ''},
      //   ru : {name: 'Russian Federation', published: 0, flag: ''},
      // },

      countries: all_countries_flags,

      step: 1,

      max_step: 1,

      customize_step: 1,

      block_next: false,

      simple_note: '',

      image_count: '-',

      customize: {
        color_pref: 'none',
        sizes    : ['squre'],
        props    : 'none',
        position    : 'none',
      },

      notes: {
        skip: true,
        data: false,
        title: ''
      },

      turnaround: 'regular',

      handling: {
        handle: 'discard',
        send: 'self',
      },

      products: [
        {
          title: '',
          type: '',
        },
      ],

      selected_country: '',

      collection_address: '',

      show_addresses_drop: false,

      addresses : [
      ],
    },

    watch: {
      collection_address: function(){
        this.show_addresses_drop = !this.show_addresses_drop;
      },

      selected_country: function(val){
        console.log(val);
      },

      image_count: function(val){

        if(this.image_count  != '-' && parseInt(this.image_count) > 0){
          jQuery('.photo_count').removeClass('error');
        }
        this.image_count = parseInt(val);
      },

      'customize.sizes':function(val){

      },

      simple_note: function(val){
        val = val.slice(0, 140);
        this.notes.data = val;
        this.notes.title = val;
        this.simple_note = val;
      }
    },

    computed: {

      button_text: function(){

        if(this.step == 4 && !this.notes.data  && this.notes.skip){
          return 'Skip Notes'
        }

        return 'Continue';
      },

      _collection_address: function(){
        return this.collection_address ? this.collection_address : 'No addresses saved, select to add new.';
      },

      customize_text: function(){
        var text = this.customize.color_pref != 'none'? this.customize.color_pref + ', ' : ' '
        text += this.customize.props != 'none'? this.customize.props + ', ' : ' '
        text += this.customize.position != 'none'? this.customize.position + ', ' : ' '

        text += this.customize.sizes.join(', ')

        return text;
      },

      handling_text:function(){
        var text = {
          handle: {
            return: 'Return Products',
            discard: 'Discard Products ',
          },

          send:{
            'self' : 'Self Ship',
            'free' : 'Free Collection',
          }
        }

        return text.handle[this.handling.handle] + ', '+ text.send[this.handling.send];
      },

      names_str: function(){
        var names = this.products.filter(e=>{ return e.title}).map(e=>{return e.title});
        var more  = names.length > 2? ' + ' + (names.length - 2 ) + ' more': '';
        return names.slice(0,2).join(', ') + more;
      },

      order_total: function(){
        var total = 0;
        var product_names = (this.products.length - 1) * this.prices.name;

        total += parseInt(product_names);

        var image_number = this.image_count == '-'? 0: this.image_count;

        var image_count = parseInt(image_number) * parseInt(this.prices.image);

        total += parseInt(image_count);

        var color = this.customize.color_pref !='none'? parseInt(this.prices.color) : 0;

        total += parseInt(color);

        var sizes = ( this.customize.sizes.length - 1 ) *  this.prices.sizes;
        total += parseInt(sizes);

        var shoots = typeof(this.notes.data) =='object' ? this.notes.data.length *this.prices.shoot : 0;
        total += parseInt(shoots);

        var turnaround = this.turnaround == 'fasttrack'? this.prices.fasttrack : 0;
        total += parseInt(turnaround);

        var handling = this.handling.handle == 'return'? this.prices.handle : 0;
        total += parseInt(handling);

        return {
          product_names: product_names,
          image_count: image_count,
          customize: color + sizes,
          shoots: shoots,
          turnaround: turnaround,
          handling: handling,
          subtotal: image_count,
          addons: parseInt(product_names) + parseInt(color)+parseInt(sizes)+parseInt(shoots)+parseInt(turnaround)+parseInt(handling),
          total: total
        };
      },

      turnaround_text: function(){
        switch(this.turnaround){
          case 'fasttrack':
            return 'Priority - 3 Business Days';
            break;
          case 'regular':
             return  'Regular - 10 Business Days';
            break;
          default:
            return ''
            break;
        }
      },

      total_images: function(){
        return this.image_count
      },

    },

    mounted: function(){
      if(!jQuery('.load-page').length){
        jQuery('#studio-content').removeClass('visuallyhidden');
        jQuery('.site-footer').removeClass('visuallyhidden');
      }
    },

    methods: {
      expand_collapse_notes: function(key){
        for(var id in this.notes.data){
          this.notes.data[id].show = 0;
        }

        this.notes.data[key].show = 1;
      },

      add_note_custom: function(){
        var product_name = this.products.length == 1? this.products[0].title : ''
        for(var id in this.notes.data){
          this.notes.data[id].show = 0;
        }

        if(this.notes.data.length < this.image_count){
          this.notes.data.push({product: product_name, text: '', show: 1});
        }


      },

      add_product_name: function(){
        this.products.push({
          title: '',
        });
      },


      change_step: function(step){
        jQuery('.summary__body ').removeClass('active');

        if(this.block_next){
          return;
        }

        switch (step){
          case 'next':
            var valid = this.validate(this.step);

            if(!valid){
              return;
            }

            if(this.step == 4 && this.notes.skip){
              this.step = 6;
              break;
            }

            this.step += 1;
            break;
          case 6:
            if(this.step >= 4){
              this.step = step;
            }
            break;
          case 'prev':
            this.step -= 1;
            this.step = Math.max(1, this.step);
            break;
          default:

            if(step >= this.max_step){
             var valid = this.validate(this.step);
              if(!valid){
                return;
              }
              this.step = step;
            }else{
              this.step = step;
            }
            break;
        }

        this.max_step = Math.max(parseInt(this.step), this.max_step);
      },

      change_value_cb: function(val, key){
        this.notes.data[key].product = val;
      },

      change_country: function(data){
        this.selected_country = data.val;
      },

      check_product_name: function(key, value){
        var vm = this;
        vm.$refs['product-name'][key].classList.remove('error');
        var titles = vm.products.map(e=>{return e.title});
        var matches = titles.filter(e=>{ return e == value});
        if(matches.length > 1){
          vm.$refs['product-name'][key].classList.add('error');
          this.block_next = true;
        }else{
          vm.$refs['product-name'][key].classList.remove('error');
          this.block_next = false;
        }
      },

      place_order: function(){

        var data = {
          customize: this.customize,
          notes: this.notes,
          turnaround: this.turnaround,
          handling: this.handling,
          products: this.products,
          image_count: this.image_count,
          product_id:  product_id[0],
          action: 'finish_shooting',
        };

        var form_data = jQuery('#checkout_form').serializeArray();

        for(var inf of form_data){
          data[inf.name] = inf.value;
        }

        jQuery.ajax({
          url: WP_URLS.wp_ajax_url,
          type: 'POST',
          dataType: 'json',
          data: data,
        })
        .done(function(e) {
          if(e.result == "failure"){
            var messages = e.messages.replace(/(<([^>]+)>)/gi, "");
            messages = messages.replace(/\r?\n/g, "");
            console.log(messages.trim());
            alert(messages.trim());
          }

          jQuery('#checkout_form').trigger('submit');

          if(e.redirect){
            console.log('redirect')
            window.location.href  = e.redirect;
          }
        })
        .fail(function() {
          console.log("error");
        })
        .always(function(e) {
          console.log(e);
        });
      },

      remove_error: function(slug, key, val){
         this.$refs[slug][key].classList.remove('error');
      },

      remove_note: function(key){
          this.notes.data.splice(key,1);
      },

      remove_product: function(key){
        this.products.splice(key,1);
      },

      set_notes: function(type){
        switch (type){
          case 'simple':
            this.notes.data = '';
            this.notes.skip = true;
            this.notes.type = 'simple';
            this.notes.title = this.simple_note;
            break;
          case 'custom':
            var product_name = this.products.length == 1? this.products[0].title : ''
            this.notes.skip = false;
            this.notes.title = 'Custom Shoot List';
            this.notes.type = 'custom';
            this.notes.data = [{product: product_name, text: '', show: 1}];
            break;
        }
      },

      change_product_type: function(data,key){
        this.products[key].type = data.val;
      },

      show_drop_address: function(){
        this.show_addresses_drop = !this.show_addresses_drop;

        jQuery('.address-wrapper').removeClass('error');
      },


      show_popup_address: function(){
        popup_address.visible = true;
      },


      validate: function(step){
        var vm = this;

        var valid = true;
        switch(step){
          case 1:
            for(var id in this.products){
              var product = this.products[id];
              valid = !product.title? false : valid;
              valid = !product.type? false : valid;

              if(!product.type){
                this.$refs.product_type[id].set_value('error',1);
              }else{
                this.$refs.product_type[id].set_value('error',0);
              }

              if(!product.title){
                vm.$refs['product-name'][id].classList.add('error');
              }else{
                vm.$refs['product-name'][id].classList.remove('error');
              }
            }
            break;
          case 2:
            valid = this.image_count == '-' || parseInt(this.image_count) <= 0? false : valid;

            if(!valid){
              jQuery('.photo_count').addClass('error');
            }else{
              jQuery('.photo_count').removeClass('error');
            }
            break;
          case 5:
            for(var id in this.notes.data){
              var note = this.notes.data[id];
              valid = !note.product? false : valid;
              valid = !note.text? false : valid;

              if(!note.product){
                this.$refs['notes-product'][id].$el.classList.add('error');
              }else{
                this.$refs['notes-product'][id].$el.classList.remove('error');
              }

              if(!note.text){
                this.$refs['notes-text'][id].classList.add('error');
              }else{
                this.$refs['notes-text'][id].classList.remove('error');
              }
            }
            break;
          case 7:
            valid = !this.selected_country && this.handling.send == 'free' ? false : valid;

            if(!valid){
              this.$refs.countries_select.error = 1;
            }

            valid = !this.collection_address && this.handling.send == 'free' ? false : valid;

            if(!this.collection_address && this.handling.send){
              jQuery('.address-wrapper').addClass('error');
            }


            break;
        }

        return valid;
      },


    },
  })
}
function create_new_order(){
  if('undefined' !== typeof(frontdesk_order_new)){
    frontdesk_order_new.set_prop('visible', true);
  }

  if('undefined' !== typeof(frontdesk_list)){
    frontdesk_list.set_prop('visible', false);
    frontdesk_list.set_prop('selected_order_id', -1);
  }

  if('undefined' !== typeof(filters)){
    filters.set_prop('visible', false);
  }

  if('undefined' !== typeof(frontdesk_order)){
    frontdesk_order.set_prop('visible', false);
  }
}

function strip(val){
  return JSON.parse(JSON.stringify(val));
}

function ctime(label, color){
  if (theme_debug) {
    if(!color){
      color = 'blue';
    }
   console.group('%c '+label+' FINISHED', 'color:'+color);
   console.timeEnd(label);
   console.groupEnd();
  }
}

function slog(label, color, bg_color) {
  if (theme_debug) {
    if(!color){
      color = 'blue';
    }
    if(!bg_color){
      bg_color = '#fff';
    }
   console.group('%c '+ label , 'color:'+color+'; background: '+bg_color);
  }
}

function elog() {
  if (theme_debug) {
   console.groupEnd();
  }
}

function clog(value, color) {

    if(!color){
      color = 'black';
    }

  if (theme_debug) {

    if(typeof(value) === 'string'){
     console.log('%c ' + value , 'color:'+color);
    }else{
     console.log(value);
    }
  }
}

function block(){
  jQuery('.block-screen').addClass('shown')
}

function unblock(){
  jQuery('.block-screen').removeClass('shown')
}


function is_boolean(val){
  switch(typeof(val)){
    case 'boolean':
      return val;
      break;
    case 'string':
      if(val.toLowerCase() === 'false'){
        return false;
      }
      if(val.toLowerCase() === 'true'){
        return true;
      }
      return !!parseInt(val);
      break;
    case 'number':
      return !!parseInt(val);
      break;
    case 'undefined':
      return false;
      break;
  }
}


function show_gallery(){
  jQuery.fancybox.open(
    gallery_items
    , {
    helpers : {
      thumbs : {
        width: 75,
        height: 50,
       }
    }
  });
}
jQuery(document).on('click', '.mobile-menu-switcher', function(){
  jQuery(this).toggleClass('active');
  jQuery('.menu-holder').toggleClass('shown');
})

jQuery(document).on('click', '.site-container', function(e){
  if(!jQuery(e.target).closest('.menu-holder').length && !jQuery(e.target).closest('.mobile-menu-switcher').length){
    jQuery('.mobile-menu-switcher').removeClass('active');
    jQuery('.menu-holder').removeClass('shown');
  }
})

jQuery('.password-enter__icon').click(function(){
  var input = jQuery(this).closest('.password-enter').find('input');

  var attr = input.attr('type') == 'password'? 'text' : 'password';
  input.attr({type: attr});
})