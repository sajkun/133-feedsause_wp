var Cookie =
{
   set: function(name, value, days)
   {
      var domain, domainParts, date, expires, host;

      if (days)
      {
         date = new Date();
         date.setTime(date.getTime()+(days*24*60*60*1000));
         expires = "; expires="+date.toGMTString();
      }
      else
      {
         expires = "";
      }

      host = location.host;
      if (host.split('.').length === 1)
      {
         // no "." in a domain - it's localhost or something similar
         document.cookie = name+"="+value+expires+"; path=/";
      }
      else
      {
         // Remember the cookie on all subdomains.
          //
         // Start with trying to set cookie to the top domain.
         // (example: if user is on foo.com, try to set
         //  cookie to domain ".com")
         //
         // If the cookie will not be set, it means ".com"
         // is a top level domain and we need to
         // set the cookie to ".foo.com"
         domainParts = host.split('.');
         domainParts.shift();
         domain = '.'+domainParts.join('.');

         document.cookie = name+"="+value+expires+"; path=/; domain="+domain;

         // check if cookie was successfuly set to the given domain
         // (otherwise it was a Top-Level Domain)
         if (Cookie.get(name) == null || Cookie.get(name) != value)
         {
            // append "." to current domain
            domain = '.'+host;
            document.cookie = name+"="+value+expires+"; path=/; domain="+domain;
         }
      }
   },

   get: function(name)
   {
      var nameEQ = name + "=";
      var ca = document.cookie.split(';');
      for (var i=0; i < ca.length; i++)
      {
         var c = ca[i];
         while (c.charAt(0)==' ')
         {
            c = c.substring(1,c.length);
         }

         if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
      }
      return null;
   },

   erase: function(name)
   {
      Cookie.set(name, '', -1);
   }
};
var animation_mixin = {
  methods:{
   beforeEnter: function (el) {
      el.style.opacity = 0
    },

    enter: function (el, done) {
      const width = getComputedStyle(el).width;

      el.style.width = width;
      el.style.position = 'absolute';
      el.style.visibility = 'hidden';
      el.style.height = 'auto';

      const height = getComputedStyle(el).height;

      el.style.width = null;
      el.style.position = null;
      el.style.visibility = null;
      el.style.height = 0;

      getComputedStyle(el).height;

      var delay = el.dataset.index * 150
      setTimeout(function () {
        Velocity(
          el,
          { opacity: 1, height: height },
          { complete: done }
        )
      }, delay)
    },

    leave: function (el, done) {
      var delay = el.dataset.index * 150
      setTimeout(function () {
        Velocity(
          el,
          { opacity: 0, height: 0 },
          { complete: done }
        )
      }, delay)
    },

    enterAfter: function(el){
      el.style.height = 'auto';

      if(typeof(this.update_scroll)!=='undefined'){
        this.update_scroll();
      }
    },

    leaveAfter: function(el){
      if(typeof(this.update_scroll)!=='undefined'){
        this.update_scroll();
      }
    }
  }
}
Vue.component('product-select',{

  data: function(){
    return {
      active: false,
      value: 'Select',
      products: this._products,
    };
  },

  props: ['_products'],

  directives: {
    'click-outside': {
      bind (el,binding, vnode) {
        const outsideClickEventHandler = event => {
          if(!el.contains(event.target) && el !== event.target){
            binding.value(event);
          }
        }

        el.__outsideClickEventHandler__ = outsideClickEventHandler;
        document.addEventListener("click", outsideClickEventHandler);
      },

      unbind(el) {
        document.removeEventListener("click", el.__outsideClickEventHandler__);
      },
    }
  },

  mounted: function(){
    this.products = this._products

    if(this.products.length == 1){
      this.value = this.products[0].title
      this.$emit('change_value', this.value);
      this.$el.classList.remove('error');
    }
  },

  watch: {
    _products: function(val){
      this.products = val;
    },
  },

  methods: {
    discard_select: function(){
      this.active = false;
    },

    set_value: function(val){
      this.$el.classList.remove('error');
      this.value = val;
      this.active = false;
      this.$emit('change_value',val);
    },
  },

  template: `
    <div class="product-list" :class="{expanded: active}" v-on:click.stop="active=true"  v-click-outside="discard_select">
      <span class="product-list__label">Products to Include</span>
      <span class="product-list__value">{{value}}</span>
      <svg class="icon svg-icon-corner-down" v-on:click.stop="active=!active"> <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#svg-icon-corner-down"></use> </svg>

      <div class="product-list__dropdown">
        <ul>
          <li :class="{active: ( 'undefined' != typeof(product.title) && value ==  product.title)}"
            v-on:click.stop ="set_value(product.title)"
            v-for="product, key in products" :key="'prodt-li-'+key">
            <svg class="icon svg-icon-tick"> <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#svg-icon-tick"></use> </svg>
            {{product.title}}
          </li>
        </ul>
      </div>
    </div>
  `,
});
new Vue({
  el : '#studio-content',

  mixins: [animation_mixin],

  data: {
    // prices: {
    //   name: 5,
    //   image: 30,
    //   sizes: 2,
    //   color: 5,
    //   shoot: 9,
    //   fasttrack: 49,
    //   handle: 15,
    // },

    prices: theme_prices,

    step: 1,

    max_step: 1,

    customize_step: 1,

    block_next: false,

    colors: theme_colors,

    // colors: [
    //   {name: 'Gloss Black',
    //    bg : 'url(assets/images/c/gloss_black.jpg)'},
    //   {name: 'maroon',
    //     bg : '#743e83'},
    //   {name: 'yellow',
    //     bg : '#f5a623'},
    //   {name: 'alpine',
    //     bg : '#ffffff'},
    //   {name: 'rose',
    //      bg: '#f26778'},
    //   {name: 'lagoon',
    //     bg   : '#53b7a0'},
    // ],

    simple_note: '',

    image_count: '-',

    customize: {
      color_pref: 'none',
      sizes    : ['squre'],
      props    : 'none',
      position    : 'none',
    },

    notes: {
      skip: true,
      data: false,
      title: ''
    },

    turnaround: 'regular',

    handling: {
      handle: 'discard',
      send: 'self',
    },

    products: [
      {
        title: '',
      },
    ],
  },

  watch: {
    image_count: function(val){
      // jQuery(this.$refs.image_count_input).focus();
      this.image_count = parseInt(val);
    },

    'customize.sizes':function(val){

    },

    simple_note: function(val){
      val = val.slice(0, 140);
      this.notes.data = val;
      this.notes.title = val;
      this.simple_note = val;
    }
  },

  computed: {

    button_text: function(){

      if(this.step == 4 && !this.notes.data  && this.notes.skip){
        return 'Skip Notes'
      }

      return 'Continue';
    },

    customize_text: function(){
      var text = this.customize.color_pref != 'none'? this.customize.color_pref + ', ' : ' '
      text += this.customize.props != 'none'? this.customize.props + ', ' : ' '
      text += this.customize.position != 'none'? this.customize.position + ', ' : ' '

      text += this.customize.sizes.join(', ')

      return text;
    },

    handling_text:function(){
      var text = {
        handle: {
          return: 'Return Products',
          discard: 'Discard Products ',
        },

        send:{
          'self' : 'Self Ship',
          'free' : 'Free Collection',
        }
      }

      return text.handle[this.handling.handle] + ', '+ text.send[this.handling.send];
    },

    names_str: function(){
      var names = this.products.filter(e=>{return e.title}).map(e=>{return e.title});
      var more = names.length > 2? ' + ' + (names.length - 2 ) + ' more': '';

      return names.slice(0,2).join(', ') + more;
    },

    order_total: function(){
      var total = 0;
      var product_names = (this.products.length - 1) * this.prices.name;

      total += parseInt(product_names);

      var image_number = this.image_count == '-'? 0: this.image_count;

      var image_count = parseInt(image_number) * parseInt(this.prices.image);

      total += parseInt(image_count);

      var color = this.customize.color_pref !='none'? parseInt(this.prices.color) : 0;

      total += parseInt(color);

      var sizes = ( this.customize.sizes.length - 1 ) *  this.prices.sizes;
      total += parseInt(sizes);

      var shoots = typeof(this.notes.data) =='object' ? this.notes.data.length *this.prices.shoot : 0;
      total += parseInt(shoots);

      var turnaround = this.turnaround == 'fasttrack'? this.prices.fasttrack : 0;
      total += parseInt(turnaround);

      var handling = this.handling.handle == 'return'? this.prices.handle : 0;
      total += parseInt(handling);



      return {
        product_names: product_names,
        image_count: image_count,
        customize: color + sizes,
        shoots: shoots,
        turnaround: turnaround,
        handling: handling,
        subtotal: image_count,
        addons: parseInt(product_names) + parseInt(color)+parseInt(sizes)+parseInt(shoots)+parseInt(turnaround)+parseInt(handling),
        total: total
      };
    },

    turnaround_text: function(){
      switch(this.turnaround){
        case 'fasttrack':
          return 'Priority - 3 Business Days';
          break;
        case 'regular':
           return  'Regular - 10 Business Days';
          break;
        default:
          return ''
          break;
      }
    },

    total_images: function(){
      return this.image_count
    },

  },

  mounted: function(){
    jQuery('#studio-content').removeClass('visuallyhidden');
  },

  methods: {
    add_note_custom: function(){

      var product_name = this.products.length == 1? this.products[0].title : ''

      if(this.notes.data.length < this.image_count){
        this.notes.data.push({product: product_name, text: ''});
      }
    },

    add_product_name: function(){
      this.products.push({
        title: '',
      });
    },


    change_step: function(step){
      jQuery('.summary__body ').removeClass('active');

      if(this.block_next){
        return;
      }


      switch (step){
        case 'next':
          var valid = this.validate(this.step);

          if(!valid){
            return;
          }

          if(this.step == 4 && this.notes.skip){
            this.step = 6;
            break;
          }

          this.step += 1;
          break;
        case 6:
          if(this.step >= 4){
            this.step = step;
          }
          break;
        case 'prev':
          this.step -= 1;
          this.step = Math.max(1, this.step);
          break;
        default:

          if(step <= this.max_step){
           var valid = this.validate(this.step);
            if(!valid){
              return;
            }
            this.step = step;
          }
          break;
      }


      this.max_step = Math.max(parseInt(this.step), this.max_step);
    },

    change_value_cb: function(val, key){
      this.notes.data[key].product = val;
    },

    check_product_name: function(key, value){
      var vm = this;
      vm.$refs['product-name'][key].classList.remove('error');
      var titles = vm.products.map(e=>{return e.title});
      var matches = titles.filter(e=>{ return e == value});
      if(matches.length > 1){
        vm.$refs['product-name'][key].classList.add('error');
        this.block_next = true;
      }else{
        vm.$refs['product-name'][key].classList.remove('error');
        this.block_next = false;
      }
    },

    place_order: function(){

      var data = {
        customize: this.customize,
        notes: this.notes,
        turnaround: this.turnaround,
        handling: this.handling,
        products: this.products,
        image_count: this.image_count,
        product_id:  product_id[0],
        action: 'finish_shooting',
        'woocommerce-process-checkout-nonce': jQuery('#woocommerce-process-checkout-nonce').val(),
      };

      jQuery.ajax({
        url: WP_URLS.wp_ajax_url,
        type: 'POST',
        dataType: 'json',
        data: data,
      })
      .done(function() {
        console.log("success");
      })
      .fail(function() {
        console.log("error");
      })
      .always(function(e) {
        console.log(e);
      });

    },

    remove_error: function(slug, key, val){
       this.$refs[slug][key].classList.remove('error');
    },

    remove_note: function(key){
        this.notes.data.splice(key,1);
    },

    remove_product: function(key){
      this.products.splice(key,1);
    },

    set_notes: function(type){

      switch (type){
        case 'simple':
          this.notes.data = '';
          this.notes.skip = true;
          this.notes.type = 'simple';
          this.notes.title = this.simple_note;
          break;
        case 'custom':
          var product_name = this.products.length == 1? this.products[0].title : ''
          this.notes.skip = false;
          this.notes.title = 'Custom Shoot List';
          this.notes.type = 'custom';
          this.notes.data = [{product: product_name, text: ''}];
          break;
      }
    },

    validate: function(step){
      var vm = this;

      var valid = true;
      switch(step){
        case 1:
          for(var id in this.products){
            var product = this.products[id];
            valid = !product.title? false : valid;

            if(!product.title){
              vm.$refs['product-name'][id].classList.add('error');
            }else{
              vm.$refs['product-name'][id].classList.remove('error');
            }
          }
          break;
        case 5:
          for(var id in this.notes.data){
            var note = this.notes.data[id];
            valid = !note.product? false : valid;
            valid = !note.text? false : valid;

            if(!note.product){
              this.$refs['notes-product'][id].$el.classList.add('error');
            }else{
              this.$refs['notes-product'][id].$el.classList.remove('error');
            }

            if(!note.text){
              this.$refs['notes-text'][id].classList.add('error');
            }else{
              this.$refs['notes-text'][id].classList.remove('error');
            }
          }
          break;
      }

      return valid;
    },


  },
})

function create_new_order(){
  if('undefined' !== typeof(frontdesk_order_new)){
    frontdesk_order_new.set_prop('visible', true);
  }

  if('undefined' !== typeof(frontdesk_list)){
    frontdesk_list.set_prop('visible', false);
    frontdesk_list.set_prop('selected_order_id', -1);
  }

  if('undefined' !== typeof(filters)){
    filters.set_prop('visible', false);
  }

  if('undefined' !== typeof(frontdesk_order)){
    frontdesk_order.set_prop('visible', false);
  }
}

function strip(val){
  return JSON.parse(JSON.stringify(val));
}

function ctime(label, color){
  if (theme_debug) {
    if(!color){
      color = 'blue';
    }
   console.group('%c '+label+' FINISHED', 'color:'+color);
   console.timeEnd(label);
   console.groupEnd();
  }
}

function slog(label, color, bg_color) {
  if (theme_debug) {
    if(!color){
      color = 'blue';
    }
    if(!bg_color){
      bg_color = '#fff';
    }
   console.group('%c '+ label , 'color:'+color+'; background: '+bg_color);
  }
}

function elog() {
  if (theme_debug) {
   console.groupEnd();
  }
}

function clog(value, color) {

    if(!color){
      color = 'black';
    }

  if (theme_debug) {

    if(typeof(value) === 'string'){
     console.log('%c ' + value , 'color:'+color);
    }else{
     console.log(value);
    }
  }
}

function block(){
  jQuery('.block-screen').addClass('shown')
}

function unblock(){
  jQuery('.block-screen').removeClass('shown')
}


function is_boolean(val){
  switch(typeof(val)){
    case 'boolean':
      return val;
      break;
    case 'string':
      if(val.toLowerCase() === 'false'){
        return false;
      }
      if(val.toLowerCase() === 'true'){
        return true;
      }
      return !!parseInt(val);
      break;
    case 'number':
      return !!parseInt(val);
      break;
    case 'undefined':
      return false;
      break;
  }
}


function show_gallery(){
  jQuery.fancybox.open(
    gallery_items
    , {
    helpers : {
      thumbs : {
        width: 75,
        height: 50,
       }
    }
  });
}
jQuery(document).on('click', '.mobile-menu-switcher', function(){
  jQuery(this).toggleClass('active');
  jQuery('.menu-holder').toggleClass('shown');
})

jQuery(document).on('click', '.site-container', function(e){
  if(!jQuery(e.target).closest('.menu-holder').length && !jQuery(e.target).closest('.mobile-menu-switcher').length){
    jQuery('.mobile-menu-switcher').removeClass('active');
    jQuery('.menu-holder').removeClass('shown');
  }
})

jQuery('.password-enter__icon').click(function(){
  var input = jQuery(this).closest('.password-enter').find('input');

  var attr = input.attr('type') == 'password'? 'text' : 'password';
  input.attr({type: attr});
})