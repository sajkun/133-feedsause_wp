  var is_mobile = {
    Android: function() {
        return navigator.userAgent.match(/Android/i);
    },
    BlackBerry: function() {
        return navigator.userAgent.match(/BlackBerry/i);
    },
    iOS: function() {
        return navigator.userAgent.match(/iPhone|iPad|iPod/i);
    },
    Opera: function() {
        return navigator.userAgent.match(/Opera Mini/i);
    },
    Windows: function() {
        return navigator.userAgent.match(/IEMobile/i);
    },

    any: function() {
        return (is_mobile.Android() || is_mobile.BlackBerry() || is_mobile.iOS() || is_mobile.Opera() || is_mobile.Windows());
    },

    anyphone: function(){
        return (is_mobile.any && (jQuery(window).width()<=768));
    }
  };
var Cookie =
{
   set: function(name, value, days)
   {
      var domain, domainParts, date, expires, host;

      if (days)
      {
         date = new Date();
         date.setTime(date.getTime()+(days*24*60*60*1000));
         expires = "; expires="+date.toGMTString();
      }
      else
      {
         expires = "";
      }

      host = location.host;
      if (host.split('.').length === 1)
      {
         // no "." in a domain - it's localhost or something similar
         document.cookie = name+"="+value+expires+"; path=/";
      }
      else
      {
         // Remember the cookie on all subdomains.
          //
         // Start with trying to set cookie to the top domain.
         // (example: if user is on foo.com, try to set
         //  cookie to domain ".com")
         //
         // If the cookie will not be set, it means ".com"
         // is a top level domain and we need to
         // set the cookie to ".foo.com"
         domainParts = host.split('.');
         domainParts.shift();
         domain = '.'+domainParts.join('.');

         document.cookie = name+"="+value+expires+"; path=/; domain="+domain;

         // check if cookie was successfuly set to the given domain
         // (otherwise it was a Top-Level Domain)
         if (Cookie.get(name) == null || Cookie.get(name) != value)
         {
            // append "." to current domain
            domain = '.'+host;
            document.cookie = name+"="+value+expires+"; path=/; domain="+domain;
         }
      }
   },

   get: function(name)
   {
      var nameEQ = name + "=";
      var ca = document.cookie.split(';');
      for (var i=0; i < ca.length; i++)
      {
         var c = ca[i];
         while (c.charAt(0)==' ')
         {
            c = c.substring(1,c.length);
         }

         if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
      }
      return null;
   },

   erase: function(name)
   {
      Cookie.set(name, '', -1);
   }
};
var animation_mixin = {
  methods:{
   beforeEnter: function (el) {
      el.style.opacity = 0
    },

    enter: function (el, done) {
      const width = getComputedStyle(el).width;

      el.style.width = width;
      el.style.position = 'absolute';
      el.style.visibility = 'hidden';
      el.style.height = 'auto';

      const height = getComputedStyle(el).height;

      el.style.width = null;
      el.style.position = null;
      el.style.visibility = null;
      el.style.height = 0;

      getComputedStyle(el).height;

      var delay = el.dataset.index * 150
      setTimeout(function () {
        Velocity(
          el,
          { opacity: 1, height: height },
          { complete: done }
        )
      }, delay)
    },


    enter_width: function (el, done) {
      var delay = 0;

      setTimeout(function () {
        Velocity(
          el,
          { opacity: 1 },
          { complete: done, duration: 400}
        )
      }, delay)
    },


    leave: function (el, done) {
      var delay = el.dataset.index * 150
      setTimeout(function () {
        Velocity(
          el,
          { opacity: 0, height: 0 },
          { complete: done }
        )
      }, delay)
    },



    leave_width: function (el, done) {
      var delay = 0
      setTimeout(function () {
        Velocity(
          el,
          { opacity: 0},
          { complete: done, duration: 400}
        )
      }, delay)
    },


    beforeLeave_width: function(el){
      el.style.opacity = 1
    },

    leaveAfter_width: function(el){
      jQuery(el).removeAttr('style');
    },


    enterAfter_width: function(el){
      jQuery(el).removeAttr('style');
    },


    enterAfter: function(el){
      el.style.height = 'auto';

      if(typeof(this.update_scroll)!=='undefined'){
        this.update_scroll();
      }
    },

    leaveAfter: function(el){
      if(typeof(this.update_scroll)!=='undefined'){
        this.update_scroll();
      }
    }
  }
}
var select_mixin2 = {
  data: function () {
    return {
      select_name : this._select_name,
      options: '',
      selected:this._selected,
      isExpanded: this._isExpanded,
      isSelected: this._isSelected ? this._isSelected: [],
      isHiddenSelect: true,
      isHiddenImitation: false,
      error : false,
    }
  },

  props:{
    _select_name : String,
    _options: Array,
    _selected: String,
    _isExpanded: String,
    _isSelected: Array,
    _isHiddenSelect: Boolean,
    _isHiddenImitation: Boolean,
  },

  beforeMount:function(){
    this.options = this._options;

    if(this._options){
      var options = strip(this._options);
      switch(typeof(options)){
        case 'object':
          options = Object.values(options);
          this.options = options.filter(function(el){
            return !!el && el != '--Select--' ;
          });
          break
        case 'array':
          this.options = options.filter(function(el){
            return !!el && el != '--Select--';
          });
          break;
        default:
          this.options = options;
          break;
      }
    }
  },

  mounted: function(){
  },

  change: function(){
    this.options = this._options;
  },

  watch:{
    selected: function(){
      this.$el.classList.remove('error');
    },

    _selected: function(val){
      this.selected = val;
    },

    _isHiddenSelect: function(val){
      this.isHiddenSelect = val;
    },

    _isHiddenImitation: function(val){
      this.isHiddenImitation = val;
    },

    _options: function(val){
      this.options = val;
    },
  },

  computed:{
    __options: function(){
      return this.options
    },
  },

  mounted:function(){
    this.change_width();
  },

  directives: {
    'click-outside': {
      bind (el,binding, vnode) {
        const outsideClickEventHandler = event => {
          if(!el.contains(event.target) && el !== event.target){
            binding.value(event);
          }
        }

        el.__outsideClickEventHandler__ = outsideClickEventHandler;
        document.addEventListener("click", outsideClickEventHandler);
      },

      unbind(el) {
        document.removeEventListener("click", el.__outsideClickEventHandler__);
      },
    }
  },

  methods: {
    change: function(){
      this.$emit('update_list', {val: this.selected, name: this.select_name});
    },

    // toggles state of expanded list initation
    expand_select: function(){
      this.isExpanded = 'expanded';
    },

    // toggles select in expanded dropdown
    update_selected_option: function(){
      for(var id in this.options){
        this.isSelected[this.options[id]] = false;
      }

      this.isSelected[this.selected] = true;
    },

    // changes data on option click
    imitate_select_option: function(value){
      this.selected = value;
      this.isExpanded = '';
      this.update_selected_option();
      this.change();
    },

     // closes select
    discard_select:function(){
      this.isExpanded = '';
    },

     // updates options of a select
    update_options: function(options){
      this.options = options;
      this.selected = options[0];
      this.isExpanded = '';
      this.update_selected_option();
    },

    // sets value for a select
    set_value: function(key, value){
      this[key] = value;
      this.$emit('update_list', { val :this.selected, name: this.select_name});

      if(key === 'options'){
        this.change_width();
      }
    },

    change_width:function(){
      var vm = this;
      var select = vm.$el.getElementsByClassName( 'select-imitation__dropdown' )[0].getElementsByClassName( 'select-imitation__list' )[0];

      vm.$el.setAttribute("style", "width: auto");

      Vue.nextTick(function() {
        var width = 0;
        var options = select.getElementsByClassName('element');

        for( var option of options){
          width = Math.max(width, option.offsetWidth);
        }

        width += 90;
        width = Math.max(width, select.offsetWidth);

        var _width = (window.outerWidth < 768)? window.outerWidth - 30 : width;
        vm.$el.setAttribute("style", "width:" + (_width) + 'px');
      });
    },

    resert_width: function(){
      var vm = this;
      vm.$el.setAttribute("style", "width: auto");
    },

    // gets value of a select
    get_value: function(){
      return this.selected;
    },

    // gets name of a select
    get_name: function(){
      return this.select_name;
    },


  },
}
get_set_props = {
  methods: {
    /**
    * update prop
    *
    * @param id - string, name of parameter from data object of this component
    * @param value  - mixed, value to store
    *
    * @return void;
    */
    update_prop: function(id, value){
      this[id] = value;
    },
    /**
    * update prop
    *
    * @param id - string, name of parameter from data object of this component
    * @param value  - mixed, value to store
    *
    * @return void;
    */
    set_prop: function(id, value){
      this[id] = value;
    },

    /**
    * get prop value
    *
    * @param id - string, name of parameter from data object of this component
    *
    * @return mixed - value of propery or 'not found';
    */
    get_prop: function(id){
      return typeof(this[id]) != 'undefined'? this[id] : 'not found';
    },
  },
}
Vue.component('select-imitation', {

  mixins: [select_mixin2],

  beforeMount:function(){
    this.options = this._options;
  },


  watch:{
    _options: function(val){
      this.options = val;
    },
  },

  template: '<div class="select-imitation" v-click-outside="discard_select"  v-bind:class="{ expanded: isExpanded}" > <select v-model="selected" v-on:change="change" v-bind:class="{ hidden: isHiddenSelect}"> <option v-for="data in options" v-bind:value="data">{{data}}</option> </select> <span class="select-imitation__view " v-on:click="expand_select"  v-bind:class="{ hidden: isHiddenImitation}">{{selected}}</span> <span class="select-imitation__arrow" onclick="imitate_select_expand(this)"></span> <div class="select-imitation__dropdown"> <ul class="select-imitation__list"> <li v-for="data in options" v-bind:class="{selected: isSelected[data]}"  v-on:click="imitate_select_option(data)"> <span  class="element">{{data}}</span> </li> </ul> </div> </div>',
})
Vue.component('product-select',{

  data: function(){
    return {
      active: false,
      value: 'Select',
      selected_products: [],
      products: this._products,
    };
  },

  props: ['_products'],

  directives: {
    'click-outside': {
      bind (el,binding, vnode) {
        const outsideClickEventHandler = event => {
          if(!el.contains(event.target) && el !== event.target){
            binding.value(event);
          }
        }

        el.__outsideClickEventHandler__ = outsideClickEventHandler;
        document.addEventListener("click", outsideClickEventHandler);
      },

      unbind(el) {
        document.removeEventListener("click", el.__outsideClickEventHandler__);
      },
    }
  },

  mounted: function(){
    this.products = this._products

    if(this.products.length == 1){
      this.value = this.products[0].title
      this.$emit('change_value', this.value);
      this.selected_products.push(this.products[0].title);
      this.$el.classList.remove('error');
    }
  },

  watch: {
    _products: function(val){
      this.products = val;
    },

    selected_products: function(val){
      this.value = this.selected_products.join(', ');
      this.$emit('change_value',this.value);
    }
  },

  methods: {
    discard_select: function(){
      this.active = false;
    },

    set_value: function(val, key){
      var items = strip(this.selected_products);
      if(items.indexOf(val) < 0){
        items.push(val);
      }else{
        var index = items.indexOf(val);
        items.splice(index,1);
      }
      this.selected_products = items;
    },
  },

  template: `
    <div class="product-list" :class="{expanded: active}" v-on:click.stop="active=true"  v-click-outside="discard_select">
      <span class="product-list__label">Products to Include</span>
      <span class="product-list__value">{{value}}</span>
      <svg class="icon svg-icon-corner-down-2" v-on:click.stop="active=!active"> <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#svg-icon-corner-down-2"></use> </svg>

      <div class="product-list__dropdown">
        <ul>
          <li :class="{active: (selected_products.indexOf(product.title)>=0)}"
            v-on:click.stop ="set_value(product.title, key)"
            v-for="product, key in products" :key="'prodt-li-'+key">

            <div class="checkbox-cont">
            <svg class="icon svg-icon-tick"> <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#svg-icon-tick"></use> </svg>
            </div>

            {{product.title}}
          </li>
        </ul>
      </div>
    </div>
  `,
});
Vue.component('select-imitation-type', {

  mixins: [select_mixin2],

  beforeMount:function(){
    this.options = this._options;
  },


  mounted: function(){
    if(is_mobile.any()){
      this.isHiddenSelect = false;
      this.isHiddenImitation = true;
    }
  },

  watch:{
    _options: function(val){
      this.options = val;
    },
  },

  methods: {
    // toggles state of expanded list initation
    expand_select: function(){
      this.isExpanded = 'expanded';
      this.error = 0;
    },

    // changes data on option click
    imitate_select_option: function(value,published){
      if(published){
        this.selected = value;
        this.isExpanded = '';
        this.update_selected_option();
        this.change();
      }
    },
  },

  template: '<div class="select-imitation" v-click-outside="discard_select"  v-bind:class="{ expanded: isExpanded, error: error}" > <select v-model="selected" v-on:change="change" v-bind:class="{ hidden: isHiddenSelect}"> <option v-for="data in options" v-bind:value="data.name">{{data.name}}</option> </select> <span class="select-imitation__view " v-on:click="expand_select"  v-bind:class="{ hidden: isHiddenImitation}">{{selected}}</span> <span class="select-imitation__arrow" onclick="imitate_select_expand(this)"></span> <div class="select-imitation__dropdown"> <ul class="select-imitation__list"> <li v-for="data in options" v-bind:class="{selected: isSelected[data], soon: !data.published}"  v-on:click="imitate_select_option(data.name, data.published)"> <span  class="element">{{data.name}} <span class="comming-soon" v-if="!data.published">COMING SOON</span></span> </li> </ul> </div> </div>',
})
Vue.component('select-imitation-country', {

  data: function(){
    return {
      selected_flag: '',
      error: 0,
      search: '',
    };
  },

  mixins: [select_mixin2],

  beforeMount:function(){
    this.options = this._options;
  },


  mounted: function(){
    if(is_mobile.any()){
      this.isHiddenSelect = false;
      this.isHiddenImitation = true;
    }
  },

  computed:{
    _ctr: function(){
      var options = Object.values(this.options);
      console.log(options);

      if(!this.search.length){
        return this.options;
      }

      options = options.filter(e=> {
        return e.name.toLowerCase().indexOf(this.search.toLowerCase()) >= 0;
      });

      return options;
    },
  },

  watch:{
    _options: function(val){
      this.options = val;
    },

    isExpanded: function(val){
      this.search = '';
    }
  },

  methods: {
    // toggles state of expanded list initation
    expand_select: function(){
      this.isExpanded = 'expanded';
      this.error = 0;
    },

    // changes data on option click
    imitate_select_option: function(value){
      if(value.published){
        this.selected = value.name;
        this.selected_flag = value.flag;
        this.isExpanded = '';
        this.update_selected_option();
        this.change();
      }
    },
  },

  template: `
  <div class="select-imitation select-country" v-click-outside="discard_select"  v-bind:class="{ expanded: isExpanded, error: error}" >
    <select v-model="selected" v-on:change="change" v-bind:class="{ hidden: isHiddenSelect}">
      <option v-for="data in options" v-bind:value="data.name">{{data.name}}</option>
    </select>
    <span class="select-imitation__view " v-on:click="expand_select"  v-bind:class="{ hidden: isHiddenImitation}"><img :src="selected_flag"> {{selected}}</span>
    <span class="select-imitation__arrow" onclick="imitate_select_expand(this)"></span>
    <div> <input class="search-country-input input-field" autocomplete="false" v-model="search" placeholder="Type country name"> </div>
     <div class="select-imitation__dropdown">
       <ul class="select-imitation__list">
         <li v-for="data in _ctr" v-bind:class="{selected: isSelected[data], soon: !data.published}"  v-on:click="imitate_select_option(data)">
             <img :src="data.flag">
             <span  class="element">{{data.name}} <span class="comming-soon" v-if="!data.published">COMING SOON</span></span>
         </li>
       </ul>
    </div>
  </div>`,
})
Vue.component('my-date-range',{

  data: function(){
    return{
      label: 'All Time',
      text: "Jan 01 1999 → Mar 17 2021",
    };
  },

  mounted: function(){
    var now     = new Date();
    var last_7  = new Date();
    var last_30  = new Date();
    var last_90 = new Date();
    last_7.setDate(last_7.getDate() - 7);
    last_30.setDate(last_30.getDate() - 30);
    last_90.setDate(last_7.getDate() - 90);

    var now     = new Date();

    var today_str = (now.getMonth() + 1) + '/' + now.getDate() + '/' + now.getFullYear();


    var last_7_str = (last_7.getMonth() + 1) + '/' + last_7.getDate() + '/' + last_7.getFullYear();

    var last_30_str = (last_30.getMonth() + 1) + '/' + last_30.getDate() + '/' + last_30.getFullYear();

    var last_90_str = (last_90.getMonth() + 1) + '/' + last_90.getDate() + '/' + last_90.getFullYear();

    var for_last_day = new Date(now.getFullYear(), now.getMonth() + 1, 0);

    var month_first_day = (now.getMonth() + 1) + '/' + 1 + '/' + now.getFullYear();

    var month_last_day = (now.getMonth() + 1) + '/' + for_last_day.getDate() + '/' + now.getFullYear();
    var vm = this;

    jQuery(vm.$el).daterangepicker({
      "autoApply": true,
      "ranges": {
          "Today": [
              today_str,
              today_str
          ],
          'This Month': [
            month_first_day,
            today_str
          ],

          'Past 7 Days': [
            last_7_str,
            today_str
          ],

          'Past 30 Days':[
            last_30_str,
            today_str
          ],

          'Past 90 Days': [
            last_90_str,
            today_str
          ],
          'All time':[
            '01/01/1999',
            today_str,
          ],
      },
      "alwaysShowCalendars": true,
      "startDate": '01/01/1999',
      "endDate": today_str
    }, function(start, end, label) {

      vm.text = start.format('MMM DD YYYY') + ' → ' + end.format('MMM DD YYYY');
      vm.label = label;

      var data = {start: start.format('YYYY-MM-DDT00:00:00'), end: end.format('YYYY-MM-DDT23:59:59'), }

      vm.$emit('change_dates', data);

    });
  },


  template: `
    <div class="my-order__date-range-picker-2">
      <svg class="icon svg-icon-calendar"> <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#svg-icon-calendar"></use> </svg>

      <span class="label">{{label}}</span>

      <span class="dates">{{text}}</span>

      <svg class="icon svg-icon-arrows"> <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#svg-icon-arrows"></use> </svg>
    </div>
  `,
});
Vue.component('my-order-details',{
  data: function(){
    return {
      meta: this._meta,
      show: false,
      p: currency_symbol,
      mode: 'photos',
      show_explain: false,
      filter: 'all',
    };
  },

  mixins: [animation_mixin],

  props: ['_meta'],

  watch: {
    'meta.images': function(images){
      if(images){
        var vm = this;
        Vue.nextTick(function(){
          var width = 230 * Object.values(images).length
          vm.$refs.shoots_container.style.width = width + 'px';
        });
      }
    },

    show : function(val){
      var vm = this;
      Vue.nextTick(function(){
        var width = 230 * Object.values(vm.meta.images).length
        vm.$refs.shoots_container.style.width = width + 'px';
      });

      if(val){
        var vm = this;
        Vue.nextTick(function(){
          var obj = jQuery(vm.$refs.filter_side);
          var el = obj.find('.active');
          var width = el.width() + parseInt(el.css('padding-left')) + parseInt(el.css('padding-right'));
          obj.find('.decoration').width(width);
          var offset = el.position().left;
          obj.find('.decoration').css({'left': offset+'px'});

          var obj = jQuery(vm.$refs.gallery);
          var el = obj.find('.active');
          var width = el.width() + parseInt(el.css('padding-left')) + parseInt(el.css('padding-right'));
          obj.find('.decoration').width(width);
          var offset = el.position().left;
          obj.find('.decoration').css({'left': offset+'px'});
        })
      }
    },

    mode: function(mode){
      console.log(mode);
      if (mode == 'photos') {
        var vm = this;
        Vue.nextTick(function(){
          var width = 230 * Object.values(vm.meta.images).length
          vm.$refs.shoots_container.style.width = width + 'px';
        });

        var vm = this;
        Vue.nextTick(function(){
          var obj = jQuery(vm.$refs.gallery);
          var el = obj.find('.active');
          var width = el.width() + parseInt(el.css('padding-left')) + parseInt(el.css('padding-right'));
          obj.find('.decoration').width(width);
          var offset = el.position().left;
          obj.find('.decoration').css({'left': offset+'px'});
        });
      };

      var vm = this;
      Vue.nextTick(function(){
        var obj = jQuery(vm.$refs.filter_side);
        var el = obj.find('.active');
        var width = el.width() + parseInt(el.css('padding-left')) + parseInt(el.css('padding-right'));
        obj.find('.decoration').width(width);
        var offset = el.position().left;
        obj.find('.decoration').css({'left': offset+'px'});
      })
    },

    '_meta': function(val){
      if(val){
         this.meta = val;
      }
    },

    filter:function(){
      var vm = this;
      Vue.nextTick(function(){
        var obj = jQuery(vm.$refs.gallery);
        var el = obj.find('.active');
        var width = el.width() + parseInt(el.css('padding-left')) + parseInt(el.css('padding-right'));
        obj.find('.decoration').width(width);
        var offset = el.position().left;
        obj.find('.decoration').css({'left': offset+'px'});
      })
    },
  },

  computed: {

    images_count: function(){
        var items = all_items = Object.values(this.meta.images);

        var items_downloaded = items.filter(e=>{
          return parseInt(e.was_downloaded) == 1;
        });

        var items_available = items.filter(e=>{
          return parseInt(e.was_downloaded) == 0 &&  parseInt(e.is_active) == 1 ;
        });

        var items_review = items.filter(e=>{
          return parseInt(e.is_active) == 0 && 'undefined' != typeof(e.request) ;
        });

        return{
          all: all_items.length,
          downloaded: items_downloaded.length,
          available: items_available.length,
          inreview: items_review.length,
        }
    },


    images_filtered: function(){
      var vm = this;

      var items = vm.images.filter(e=>{
        valid = true;

        switch(vm.filter){

          case 'downloaded':
            return parseInt(e.was_downloaded) == 1;
            break;

          case 'available':
            return parseInt(e.was_downloaded) == 0 &&  parseInt(e.is_active) == 1 ;
            break;

          case 'inreview':
            return parseInt(e.is_active) == 0 && 'undefined' != typeof(e.request) ;
            break;

          default:
            return true;
             break;
        }

      });

      return items;
    },//gallery_thumbs_filtered

    customisations: function(){
      if(!typeof( this.meta.item) == 'undefined') {
        return {
          count: 0,
          price: 'Free',
        };
      }

      if(!this.meta.item){
        return {
          count: 0,
          price: 'Free',
        };
      }

      if('undefined'!= typeof(this.meta.item.extra_data.colors) && this.meta.item.extra_data.colors.value){
        var colors_count = this.meta.item.extra_data.colors.value.split('\n').length;
      }else{
        colors_count = 0;
      }

      var size_count = this.meta.item.extra_data.sizes.value.length - 1;

      var position_count = 'undefined'!= typeof(this.meta.item.extra_data.position) && this.meta.item.extra_data.position.value != 'none'? 1 : 0;


      var price = size_count* parseInt(this.meta.item.prices.sizes) + colors_count* parseInt(this.meta.item.prices.color);

       return {
        count: size_count + colors_count + position_count,
        price: price? this.p + price : 'Free',
      };
    },

    current_order_status: function(){

    },

    fasttrack: function(){
      return{
        text: this.meta.has_fasttrack == 1? "3 Buisenes Days" : "10 Buisenes Days" ,
        price: this.meta.has_fasttrack == 1? this.p + this.meta.fasttrack_price : 'Free',
      };
    },

    gallery_thumbs: function(){
      var vm = this;

      var items = Object.values(this.meta.images).map(img=>{
        var thumbnails = Object.values(strip(vm.meta.thumbnails));

        var url_data = thumbnails.filter(th=>{return img.id == th.item_id});

        return {
          meta: img,
          sizes: ('undefined' !=  typeof(vm.meta.item) && vm.meta.item)? vm.meta.item.extra_data.sizes : ['squre'],
          meta: img,
          url: 'undefined' !== typeof(url_data[0] )? url_data[0].attachment_url : DUMMY_S,
          url_lg: 'undefined' !== typeof(url_data[0] )? url_data[0].attachment_url_lg : DUMMY_S,
        };
      });

      items = items.filter(e=>{
        valid = true;

        switch(vm.filter){

          case 'downloaded':
            return parseInt(e.meta.was_downloaded) == 1;
            break;

          case 'available':
            return parseInt(e.meta.was_downloaded) == 0 &&  parseInt(e.meta.is_active) == 1 ;
            break;

          case 'inreview':
            return parseInt(e.meta.is_active) == 0 && 'undefined' != typeof(e.meta.request) ;
            break;

          default:
            return true;
             break;
        }
      });

      return items;
    },

    handle: function(){
      return{
        text: this.meta.has_handle == 1? "Return Product" : "Discard Product" ,
        price: this.meta.has_handle == 1? this.p + this.meta.handle_price : 'Free',
      };
    },

    item: function(){

      if(!typeof( this.meta.item) == 'undefined') {
        return {
          name:   'not set',
          count: 0,
          price: 'Free',
        };
      }
      if(!typeof( this.meta.item) == 'undefined') {
        return {
          name:   'not set',
          count: 0,
          price: 'Free',
        };
      }

      if(!this.meta.item){
         return {
          name:   'not set',
          count: 0,
          price: 'Free',
        };
      }

      var count = typeof( this.meta.item.item_name ) == 'object'? this.meta.item.item_name.length - 1 :  0;


      var prices = !!this.meta.item.prices ? this.meta.item.prices : theme_prices;

      return {
        name: typeof( this.meta.item.item_name ) == 'object'? this.meta.item.item_name[0] :  this.meta.item.item_name,
        count: count,
        price: count* parseInt(prices.name)? this.p + (count* parseInt(prices.name)): 'Free',
      };
    },

    notes: function(){
      if(!typeof( this.meta.item) == 'undefined') {
        return {
          text: '-',
          price: '-',
        };
      }

      if(!this.meta.item){
         return {
          text: '-',
          price: '-',
        };
      }

      if('undefined' == typeof(this.meta.item.extra_data.comment)){
      }else if(!this.meta.item.extra_data.comment.value){
         return {
          text: '-',
          price: '-',
        };
      }else if(this.meta.item.extra_data.comment.value == 'false'){
         return {
          text: '-',
          price: '-',
        };
      }else if(this.meta.item.extra_data.comment.value){
        return{
          text: this.meta.item.extra_data.comment.value,
          price: 'Free',
        }
      }
      if('undefined' == typeof(this.meta.item.extra_data.comment_type)){

      }else{
        var price = this.meta.item.extra_data.shoots.length * parseInt(this.meta.item.prices.shoot);
        return{
          text: this.meta.item.extra_data.comment_type.value,
          price: price ? this.p + price : 'Free',
        }
      }

      return {
        text: 0,
        price: 'Free',
      };
    },

    order_date: function(){
      var date = new Date(this.meta.date);
      var fmt  = new DateFormatter();
      return fmt.formatDate(date, 'F d, Y');
    },

    order_statuses: function(){
      return order_statuses;
    },

    photos: function(){
      if(!typeof( this.meta) == 'undefined') {
        return {
          count: '-',
          price: '-',
        };
      }

      if(!typeof( this.meta.item) == 'undefined') {
        return {
          count: this.meta.photo_limit,
          price: '-',
        };
      }

      if(!this.meta.item){
         return {
          count: this.meta.photo_limit,
          price: '-',
        };
      }

      var price = typeof(this.meta.item.extra_data.image_count) !== 'undefined'? parseInt(this.meta.item.extra_data.image_count.value) * parseInt(this.meta.item.prices.single_product_price) : 0;

      return{
        count: typeof(this.meta.item.extra_data.image_count) !== 'undefined'?  parseInt(this.meta.item.extra_data.image_count.value) : this.meta.photo_limit,
        price: price? this.p + price : "Free",
      };
    },

    photo_limits: function(){
      var total = 0;
      var limit = 0;
      var images = Object.values(this.meta.images);

      total = images.length;

      if('undefined' == typeof(this.meta) ||'undefined' == typeof(this.meta.item) || !this.meta.item || 'undefined' == typeof(this.meta.item.extra_data.image_count) ){
        limit = this.meta.photo_limit;
      }else{
        limit = this.meta.item.extra_data.image_count.value;
      }

      var image_downloaded = images.filter(e=>{
         return e.was_downloaded == 1 && (typeof( e.is_free ) == 'undefined' || e.is_free == 0);
       });


      limit -= image_downloaded.length;

      return{
        total: total,
        limit: Math.max(limit, 0),
      }
    },

    prices: function(){
      return theme_prices;
    },

    product_name: function(){
      return 'undefined' != typeof(this.meta) && 'undefined' != typeof(this.meta.item) && this.meta.item ?this.meta.item.product_name : 'undefined';
    },

    total: function(){
      var addons = 0;
      var images = 0;

      addons += this.meta.has_handle == 1? parseInt(this.meta.handle_price) : 0;
      addons += this.meta.has_fasttrack == 1? parseInt(this.meta.fasttrack_price) : 0;

      if(!typeof( this.meta.item) != 'undefined' && this.meta.item) {

        // add customisation proce

        if('undefined'!= typeof(this.meta.item.extra_data.colors) && this.meta.item.extra_data.colors.value){
          var colors_count = this.meta.item.extra_data.colors.value.split('\n').length;
        }else{
          colors_count = 0;
        }

        var size_count = this.meta.item.extra_data.sizes.value.length - 1;

        var price = size_count* parseInt(this.meta.item.prices.sizes) + colors_count* parseInt(this.meta.item.prices.color);

        addons += price;

        // add comments price

        if('undefined' != typeof(this.meta.item.extra_data.shoots)){
          addons += this.meta.item.extra_data.shoots.length * parseInt(this.meta.item.prices.shoot);
        }

        // add name prices

          var count = typeof( this.meta.item.item_name ) == 'object'? this.meta.item.item_name.length - 1 :  0;

          prices = !!this.meta.item.prices ? this.meta.item.prices : theme_prices;

          addons += count * parseInt(prices.name);


        var images = typeof(this.meta.item.extra_data.image_count) !== 'undefined'? parseInt(this.meta.item.extra_data.image_count.value) * parseInt(this.meta.item.prices.single_product_price) : 0;
      }


      return{
        addons: this.p + addons,
        images: this.p + images,
      }
    }
  },

  mounted: function(){
    this.meta = this._meta;
  },

  methods: {
    move_deco: function(target){

      if(target == 'filter_side'){
        var el  = jQuery(this.$refs['filter_side']).find('.active');
        var obj = el.closest('.my-order__filter');
        var width = el.width() + parseInt(el.css('padding-left')) + parseInt(el.css('padding-right'));
        obj.find('.decoration.pre').width(width);

        var offset = el.position().left;
        obj.find('.decoration.pre').css({'left': offset+'px'});
        return;
      };

      if(target == 'gallery'){
        var el  = jQuery(this.$refs['gallery']).find('.active');
        var obj = el.closest('.my-order__filter');
        var width = el.width() + parseInt(el.css('padding-left')) + parseInt(el.css('padding-right'));
        obj.find('.decoration.pre').width(width);

        var offset = el.position().left;
        obj.find('.decoration.pre').css({'left': offset+'px'});
        return;
      };

      var el  = jQuery(this.$el).find('[href='+target+']');
      var obj = el.closest('.my-order__filter');

      var width = el.width() + parseInt(el.css('padding-left')) + parseInt(el.css('padding-right'));
      obj.find('.decoration.pre').width(width);

      var offset = el.position().left;
      obj.find('.decoration.pre').css({'left': offset+'px'});
    },

    go_back: function(){
      this.show = false;
      this.$parent.show_list =  true;
    },

    review_submited_cb: function(data){

      var index = this.meta.images.findIndex(e=>{
         return e.id == data.image_id;
      });

      this.meta.images[index].is_active = 0;
      this.meta.images[index].request   = 1;

      this.$emit('review_submited', {imaged_id: data.image_id, order_id: this.meta.order_id});
    },

    show_popup: function(data){
      this.$refs.my_order_popup.show   = true;
      this.$refs.my_order_popup._images_count  = strip(this.images_count);
      this.$refs.my_order_popup._image = strip(data);
      this.$refs.my_order_popup._meta  = strip(this.meta);
    },

    update_images_cb : function(data){
      this.$set(this.meta, 'images', data.images);
      this.$emit('images_update', data);
    },
  },


  template: '#my-order-details',
})
Vue.component('my-order-popup',{

  data: function(){
    return {
      meta: this._meta,
      image: this._image,
      images_count: this._images_count,
      show: false,
      position: 'step_1',
      request_type: '',
      request_text: '',
      request_attachment: false,
      request_attachment_title: 'Attach Screenshot (optional)',
      show_blocker: false,
      theme_prices    : theme_prices,
      currency_symbol : currency_symbol,
      card_inserted: false,
      show_sizes: false,
      reshoot_order: '-1',
    };
  },

  mixins: [animation_mixin],

  props: ['_meta', '_image', '_images_count'],

  watch: {
    show: function(show){
      this.request_attachment_title = 'Attach Screenshot (optional)';
      this.request_type = '';
      this.request_text = '';
      this.request_attachment = false;
      this.show_blocker = false;

      var vm = this;

      if (show) {
        Vue.nextTick(function(){
          if(parseInt(vm.images_count.downloaded) >= parseInt(vm.meta.photo_limit) && parseInt(vm.image.meta.was_downloaded) === 0){
            vm.position = 'step_0';
          }else{
            vm.position = 'step_1';
          }
        })
      }else{
        this.position = '';
      }
    },

    '_images_count': function(val){
      if(val){
        this.images_count = val;
      };
    },

    '_meta': function(val){
      if(val){
        this.meta = val;
      };
    },

    '_image': function(val){
      if(val){
        this.image = val;
      };
    },

    position: function(val){
      var vm = this;

      // console.log(vm.theme_prices);
       if(val == 'step_1'){
         vm.request_type = '';
       }


      if(val == 'step_2' || val == 'step_0'){
        const data = new FormData();

        data.append('items', 'reshoot for ' + vm.meta.order_id + vm.image.id);
        data.append('currency', 'GBP');
        data.append('price', val == 'step_2' ? vm.theme_prices.reshoot*100 : vm.theme_prices.buy_single*100 );

        fetch(WP_URLS.theme_url+"/stripe/payment.php", {
        // fetch(WP_URLS.wp_ajax_url, {
          method: "POST",
          headers: {
            // "Content-Type": "application/json"
          },
          body:data
          // body: JSON.stringify({
          //    'items' : ,
          //    'price': 3100,
          //    'currency' : 'GBP',
          //    'action': 'add_correction_attachment'
          //  })
        })
          .then(function(result) {
            return result.json();
          })
          .then(function(data) {
            var elements = theme_stripe.elements();

            var style = {
              base: {
                color: "#32325d",
                fontFamily: 'Arial, sans-serif',
                fontSmoothing: "antialiased",
                fontSize: "16px",
                "::placeholder": {
                  color: "#32325d"
                }
              },
              invalid: {
                fontFamily: 'Arial, sans-serif',
                color: "#fa755a",
                iconColor: "#fa755a"
              }
            };

            var card = elements.create("card", { style: style });
            // Stripe injects an iframe into the DOM

            var card_element_id = val == 'step_2' ? "#card-element" : "#card-element-single";
            var form_id = val == 'step_2' ? "payment-form" : "payment-form-single";
            var card_error_id = val == 'step_2' ? "#card-error" : "#card-error-single";

            card.mount(card_element_id);

            card.on("change", function (event) {
              // Disable the Pay button if there are no card details in the Element
              vm.card_inserted = !event.empty && event.complete && !event.error;
              document.querySelector(card_error_id).textContent = event.error ? event.error.message : "";
            });

            var form = document.getElementById(form_id);

            form.addEventListener("submit", function(event) {
              console.log('submitted')
              event.preventDefault();
              // Complete payment when the submit button is clicked
              vm.payWithCard(theme_stripe, card, data.clientSecret);
            });
          });
      }
    },

    request_attachment: function(file){
      // console.log(file);
    },

    request_type: function(val){
      // console.log(val);
    },


    request_text: function(val){
      this.request_text = val.substring(0, 500);
      this.$refs.request_text.style.height  = Math.min(this.$refs.request_text.scrollHeight, 100) + 'px';

      if(!val){
        this.$refs.request_text.style.height = '52px';
      }
    },
  },

  computed: {

  },

  mounted: function(){
    this.images_count = this._images_count;
    this.meta = this._meta;
    this.image = this._image;
  },

  methods: {
    exec_buy_single_image: function(){
      if(this.card_inserted){
        this.show_blocker = true;
        document.getElementById("submit-btn-single").click();
      }
    },

    exec_download : function(){

      if(this.image.meta.is_active == 0){
        return;
      }

      var data = {
        action: 'exec_download_request_theme',
        order_id : this.meta.order_id,
        image_id : this.image.meta.id,
        order_item_id  :  this.meta.item.order_item_id,
      };

      var vm = this;
      vm.show_blocker = true;

      jQuery.ajax({
        url: WP_URLS.wp_ajax_url,
        type: 'POST',
        dataType: 'json',
        data: data,
      })

      .done(function(e) {

        var order_id = vm.meta.order_id;
        var image_id = vm.image.meta.id;

        if(e.exec_upload){
          vm.dropbox_call(order_id, image_id);
        }

        if(e.images){
          vm.$emit('update_images', {order_id: order_id, images: e.images} );
        }
      })
      .fail(function() {
        console.log("error");
      })
      .always(function(e) {
        console.log(e);
      });
    },

    dropbox_call: function(order_id, image_id){
      var vm = this;
      var data = null;
      var xhr = new XMLHttpRequest();

      xhr.open("POST", "https://content.dropboxapi.com/2/files/download_zip");
      xhr.responseType = 'blob';
      xhr.setRequestHeader("authorization", "Bearer "+_dropbox.token);
      xhr.setRequestHeader("dropbox-api-arg", '{"path":"/Feedsauce Team/Hub/order_'+order_id+'/'+image_id+'"}');
      xhr.setRequestHeader("cache-control", "no-cache");

      xhr.onload = function(e) {
        vm.show_blocker = false;
        vm.$set(vm.image.meta, 'was_downloaded', 1);
        vm.image.meta.was_downloaded = 1;

        if (this.status == 200) {
            // Create a new Blob object using the
            //response data of the onload object
            var blob = new Blob([this.response], {type: 'application/zip'});
            //Create a link element, hide it, direct
            //it towards the blob, and then 'click' it programatically
            let a = document.createElement("a");
            a.style = "display: none";
            document.body.appendChild(a);
            //Create a DOMString representing the blob
            //and point the link element towards it
            let url = window.URL.createObjectURL(blob);
            a.href = url;
            a.download = 'load.zip';
            //programatically click the link to trigger the download
            a.click();
            //release the reference to the file by revoking the Object URL
            window.URL.revokeObjectURL(url);
        }else{
            //deal with your error state here
        }
      };
      xhr.send(data);
    },

    get_file: function(event){
      this.request_attachment_title = event.target.files[0].name;
      this.request_attachment = event.target.files[0];
    },

    exec_stripe: function(){
      if(this.card_inserted){
        this.show_blocker = true;
        document.getElementById("submit-btn").click();
      }
    },

    submit_review: function(){

      var vm = this;

      if(!vm.request_text){
        return;
      }

      vm.show_blocker = true;
      var attachment_url = 0;

      if(vm.request_attachment){
        vm.do_submit_attachment();
      }else{
        vm.do_submit_review_text(attachment_url);
      }
    },


    do_submit_review_text: function( attachment_url ){
      var vm = this;
      var date = new Date();
      var fmt  = new DateFormatter();

      var data ={
        action:         'add_correction',
        attachment_url:  attachment_url,
        order_id:        vm.meta.order_id,
        image_id:        vm.image.meta.id,
        request_text:    vm.request_text,
        // async: false,
        date:            fmt.formatDate(date, 'Y-m-d H:i:s'),
      };


      jQuery.ajax({
        url: WP_URLS.wp_ajax_url,
        type: 'POST',
        dataType: 'json',
        data: data,
      })

      .done(function() {
        console.log("success");
        vm.position = 'step_3';
        vm.$emit('review_submited', {image_id: vm.image.meta.id});
      })

      .fail(function() {
        console.log("error");
      })

      .always(function(e) {
        vm.show_blocker = false;

        console.log('Correction Submited');
        console.log(e);
      });
    },

    do_submit_attachment: function(){
      var vm = this;
      var fd   = new FormData();
      fd.append('attachment', vm.request_attachment);
      fd.append('action', 'add_correction_attachment');

      return jQuery.ajax({
        url: WP_URLS.wp_ajax_url,
        type: 'POST',
        processData: false,
        contentType: false,
        // async: false,
        data: fd,
      })

      .done(function(attachment_url) {
        console.log(attachment_url);
         vm.do_submit_review_text(attachment_url);
      })

      .always(function(e){
        vm.request_attachment = false;
        vm.request_attachment_title ='Attach Screenshot (optional)';
      });
    },

    payWithCard: function(stripe, card, clientSecret) {
      // loading(true);

      var vm = this;
      stripe
        .confirmCardPayment(clientSecret, {
          payment_method: {
            card: card
          }
        })
        .then(function(result) {
          if (result.error) {
            var errorMsgText = result.error.message
            var errorMsg = document.querySelector("#card-error");
            errorMsg.textContent = errorMsgText;
            setTimeout(function() {
              errorMsg.textContent = "";
            }, 4000);
          } else {
            vm.proceed_stripe_payment(result);
          }
        });
    },

    proceed_stripe_payment: function(result){
      var vm = this;

      console.log(strip(this.meta));
      var attachment_url = false;

      if(vm.request_attachment){
        var fd   = new FormData();
        fd.append('attachment', vm.request_attachment);
        fd.append('action', 'add_correction_attachment');

        var attachment_url = jQuery.ajax({
          url: WP_URLS.wp_ajax_url,
          type: 'POST',
          processData: false,
          contentType: false,
          async: false,
          data: fd,
        })
      }

      var args = {
          action: 'proceed_stripe_payment',
          type: vm.position == 'step_2' ? 'reshoot' : 'buy_single',
          result: result,
          order_id: vm.meta.order_id,
          image_id: vm.image.meta.id,
          recipe_name: vm.meta.item.product_name,
          product_price:  vm.position == 'step_2' ? vm.theme_prices.reshoot : vm.theme_prices.buy_single ,
          extra_data: vm.meta.item.extra_data,
        };

      if(attachment_url){
        args.attachment_url = attachment_url.responseJSON;
      }

      if(vm.request_text){
        args.request_text = vm.request_text;
      }

      jQuery.ajax({
        url: WP_URLS.wp_ajax_url,
        type: 'POST',
        dataType: 'json',
        data: args,
      })

      .done(function(e) {

        if('undefined' == typeof(e.type)){
          return;
        }

        switch(e.type){
          case 'buy_single':
            vm.$set(vm.image.meta, 'was_downloaded', 1);
            for(var id in vm.meta.images){
              if(vm.meta.images[id].id == vm.image.meta.id){
                vm.meta.images[id].was_downloaded = 1;
              }
            }

            var order_id = vm.meta.order_id;
            vm.$emit('update_images', {order_id: order_id, images: vm.meta.images} );
            vm.position = 'step_1';
            vm.dropbox_call(order_id, vm.image.meta.id);
            break;
          default:
            vm.position      = 'step_4';
            vm.reshoot_order = e.order_id;
            break;
        }
      })

      .fail(function(e) {
        console.log("error");
        console.log(e);
      })

      .always(function(e) {
        vm.card_inserted = false;
        vm.show_blocker = false;
        console.log(e);
      });
    },
  },

  template: '#my-order-popup',
})
if(document.getElementById('popup_address')){
  var popup_address = new Vue({
    el: '#popup_address',
    mixins: [get_set_props, animation_mixin],
    data: {
        visible: false,
        countries: all_countries,
        country: 'United Kingdon',
        city: '',
        line_1: '',
        line_2: '',
        zip: '',
    },

    mounted: function(){
      this.$el.classList.remove('visuallyhidden');
    },

    methods: {
      submit: function(){
        var validated = this.validate();
        var vm = this;

        if(!validated.is_valid){
          setTimeout(function(){
            alert(validated.messages.join('\n'));
          },100);

          return;
        };

        var _keys = [
          'country',
          'zip',
          'city',
          'line_1',
          'line_2',
        ];

        var item = [];

        for(var id of _keys){
          if(this[id]){
            item.push(this[id]);
          }
        }

        studio_app.collection_address = item.join(', ');
        studio_app.addresses.push(item.join(', ') );
        this.visible = false;

      },

      update_data: function(data){
        if(data.val){
          this[data.name] = data.val;
        }
      },

      validate: function(){
        var check = {
          city:   'Enter a City or Town please',
          line_1: 'Enter an address please',
          zip:    'Enter postal code please',
        }

        var validated = {
          is_valid: true,
          messages: [],
        };

        for(var id in check){
          var item = this[id];
            if(!item){
              this.$refs[id].classList.add('error');
              validated.is_valid = false;
              validated.messages.push(check[id]);
            }
          }
        return validated;
      },
    }
  })
}
if(document.getElementById('studio-content')){
var studio_app = new Vue({
  el : '#studio-content',

  mixins: [animation_mixin],

  data: {
    // prices: {
    //   name: 5,
    //   image: 30,
    //   sizes: 2,
    //   color: 5,
    //   shoot: 9,
    //   fasttrack: 49,
    //   handle: 15,
    // },

    prices: theme_prices,
    countries: all_countries_flags,
    product_types: product_types,
    coupons: [],
    applied_coupon: '',
    may_be_coupon: '',
    coupon_timer: false,
    order_placed: false,

    // product_types: [
    //   {name: 'Type Of product', published: 1},
    //   {name: 'Beauty', published: 1},
    //   {name: 'Bags', published: 1},
    //   {name: 'Clothing', published: 0},
    // ],

    step: 1,

    max_step: 1,

    customize_step: 1,

    block_next: false,

    // colors: [
    //   {name: 'Gloss Black',
    //    bg : 'url(assets/images/c/gloss_black.jpg)'},
    //   {name: 'maroon',
    //     bg : '#743e83'},
    //   {name: 'yellow',
    //     bg : '#f5a623'},
    //   {name: 'alpine',
    //     bg : '#ffffff'},
    //   {name: 'rose',
    //      bg: '#f26778'},
    //   {name: 'lagoon',
    //     bg   : '#53b7a0'},
    // ],

   colors: theme_colors,

    simple_note: '',

    image_count: '-',

    customize: {
      color_pref: [],
      sizes    : ['squre'],
      props    : 'none',
      position    : 'none',
    },

    notes: {
      skip: true,
      data: false,
      title: '',
      type: '',
    },

    turnaround: 'regular',

    handling: {
      handle: 'discard',
      send: 'self',
    },

    products: [
      {
        title: '',
        'type': '',
      },
    ],


    selected_country: '',

    collection_address: '',

    show_addresses_drop: false,

    order_total_discount: 0,

    addresses : [
    ],
  },

  watch: {
      'customize.color_pref': function(val){
        console.log(val);
        if(val.length == 0){
          jQuery(this.$refs.discard_colors).prop({'checked': 1});
          jQuery('[name="color"]').prop({'checked': 0})
        }else{
          jQuery(this.$refs.discard_colors).prop({'checked': 0});
        }
      },

      order_total_discount : function(){

        var discount =  this.order_total_discount > this.order_total?  this.order_total:this.order_total_discount;

        discount = discount < 0? 0: discount;

        return discount;
      },

      image_count: function(val){

        if(this.image_count  != '-' && parseInt(this.image_count) > 0){
          jQuery('.photo_count').removeClass('error');
        }

        this.image_count = val;

        this.$refs.image_count_input.value = this.image_count;
        this.$refs.image_count_input.classList.remove('error');
        // this.image_count = isNaN(this.image_count)? 1 : this.image_count;
      },


    'customize.sizes':function(val){

    },

      may_be_coupon: function(){
        this.$refs.may_be_coupon.classList.remove('error');
      },


    simple_note: function(val){
      val = val.slice(0, 140);
      this.notes.data = val;
      this.notes.title = val;
      this.simple_note = val;
    }
  },

  computed: {
    _collection_address: function(){
      return this.collection_address ? this.collection_address : 'No addresses saved, select to add new.';
    },

    button_text: function(){

      if(this.step == 4 && !this.notes.data  && this.notes.skip){
        return 'Skip Notes'
      }

      return 'Next';
    },

    customize_text: function(){
      var count = 0;
      var data = {
        Colors: strip(this.customize.color_pref),
        Props: strip(this.customize.props),
        Position: strip(this.customize.position),
        Sizes: strip(this.customize.sizes),
      };

      for(var id in data){
        switch(typeof(data[id])){
          case 'object':
            if(id == 'Sizes' && data[id].length <=1){
              count += (data[id].length -1);
              break;
            }

            count += data[id].length;

           break;

         default:
            if(data[id] !== 'none'){
              count++;
            }
          break;
        }
      }

      var string = (count == 1|| count == 21|| count == 31)? count +' Customisation' : count + ' Customisations'

      return this.step >= 3? string : '-' ;
    },

    get_html: function(){
      switch(this.step){
        case 1:
          return '<svg class="icon svg-icon-images-white"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href=" #svg-icon-images-white"></use></svg> <span class="">Photos</span>';
          break;
        case 2:
        return '<svg class="icon svg-icon-custom"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href=" #svg-icon-custom"></use></svg> <span class="">Customize</span>';
          break;
        case 3:
         return '<svg class="icon svg-icon-notes"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href=" #svg-icon-notes"></use></svg> <span class="">Studio Notes</span>';
          break;
        case 4:

          if(this.notes.skip){
             return '<svg class="icon svg-icon-flash"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href=" #svg-icon-flash"></use></svg> <span class="">Turnaround</span>';
           }else{

             return '<svg class="icon svg-icon-notes"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href=" #svg-icon-notes"></use></svg> <span class="">Custom Notes</span>';
           }

          break;
        case 5:
         return '<svg class="icon svg-icon-flash"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href=" #svg-icon-flash"></use></svg> <span class="">Turnaround</span>';
          break;
        case 6:
         return '<svg class="icon svg-icon-handling"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href=" #svg-icon-handling"></use></svg> <span class="">Handling</span>';
          break;
        case 7:
         return '<svg class="icon svg-icon-tick"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href=" #svg-icon-tick"></use></svg> <span class="">Review & Pay</span>';
          break;
      }
    },

    handling_text:function(){
      if(this.max_step < 7){
        return '-';
      }

      var text = {
        handle: {
          return: 'Return Products',
          discard: 'Discard Products ',
        },

        send:{
          'self' : 'Self Ship',
          'free' : 'Free Collection',
        }
      }

      return text.handle[this.handling.handle];
    },

      names_str: function(){
        var names = this.products.filter(e=>{ return e.title}).map(e=>{return e.title});
        var more  = names.length > 1? `<span>+` + (names.length - 1 ) + `</span>`: '';
        var data = {
          name:names.length == 0? '-' : names[0],
          addon: names.length > 1 ? names.length - 1 : false,
        };
        return data;
      },

    order_total: function(){
      var total = 0;
      var product_names = (this.products.length - 1) * this.prices.name;

      total += parseInt(product_names);

      var image_number = this.image_count == '-'? 0: this.image_count;

      var image_count = parseInt(image_number) * parseInt(this.prices.image);

      total += parseInt(image_count);

      var color = parseInt(this.prices.color)*this.customize.color_pref.length;

      total += parseInt(color);

      var sizes = ( this.customize.sizes.length - 1 ) *  this.prices.sizes;
      total += parseInt(sizes);

      var shoots = typeof(this.notes.data) =='object' ? this.notes.data.length *this.prices.shoot : 0;
      total += parseInt(shoots);

      var turnaround = this.turnaround == 'fasttrack'? this.prices.fasttrack : 0;
      total += parseInt(turnaround);

      var handling = this.handling.handle == 'return'? this.prices.handle : 0;
      total += parseInt(handling);

      total -=  this.order_total_discount;

      return {
        product_names: product_names > 0? '£'+ product_names : 'Free' ,
        image_count: image_count > 0 && this.max_step >=2? '£'+ image_count : '-' ,
        customize:this.max_step >=3 ?  color + sizes > 0 ? '£'+ (color + sizes):' Free' : '-' ,
        shoots: this.max_step >=4 ? shoots > 0? '£'+ shoots: 'Free' : '-',
        turnaround: this.max_step >= 6? turnaround > 0 ?  '£'+  turnaround : 'Free' : '-',
        handling: this.max_step >= 7? handling > 0 ? '£'+  handling : 'Free' : '-',
        subtotal: image_count,
        addons: parseInt(product_names) + parseInt(color)+parseInt(sizes)+parseInt(shoots)+parseInt(turnaround)+parseInt(handling),
        total: total
      };
    },

    turnaround_text: function(){
      if(this.max_step < 6){
        return '-';
      }
      switch(this.turnaround){
        case 'fasttrack':
          return '3 Business Days';
          break;
        case 'regular':
           return  '10 Business Days';
          break;
        default:
          return ''
          break;
      }
    },

    total_images: function(){
      return this.image_count
    },

  },

  mounted: function(){
     this.get_coupons();
  },

  methods: {
    expand_collapse_notes: function(key){
      var valid = this.validate(this.step);

      if(valid){
        for(var id in this.notes.data){
          this.notes.data[id].show = 0;
        }
      }

      this.notes.data[key].show = 1;
    },

    add_note_custom: function(){

      var product_name = this.products.length == 1? this.products[0].title : ''

        for(var id in this.notes.data){
          this.notes.data[id].show = 0;
        }

        if(this.notes.data.length < this.image_count){
          this.notes.data.push({product: product_name, text: '', show: 1});
        }

    },

      get_coupons: function(){
        // console.log('get_coupons');
        var vm = this;
        var data = {
          action: 'get_coupons',
        };
        jQuery.ajax({
          url: WP_URLS.wp_ajax_url,
          type: 'POST',
          dataType: 'json',
          data: data,
        })
        .done(function(e) {
          // console.log("success");
          if('undefined' !=typeof(e.coupons)){
            vm.coupons = e.coupons;
          }
        })
        .fail(function() {
          // console.log("error");
        })
        .always(function(e) {
          // console.log(e);
        });
      },

    apply_coupon: function(){
      if(this.coupons.indexOf(this.may_be_coupon) < 0){
        this.$refs.may_be_coupon.classList.add('error');
        return;
      }

      this.coupon_timer = true;
      var vm = this;

      var data = {
        action: 'apply_may_be_coupon',
        coupon: vm.may_be_coupon
      };

      jQuery.ajax({
        url: WP_URLS.wp_ajax_url,
        type: 'POST',
        dataType: 'json',
        data: data,
      })
      .done(function(e) {
        console.log("success");

        if(e.applied){
          vm.applied_coupon = vm.may_be_coupon;
          vm.order_total_discount = e.discount;
        }
      })
      .fail(function() {
        console.log("error");
      })
      .always(function(e) {
        console.log(e);
        vm.coupon_timer = false;
        vm.may_be_coupon = '';
      });

    },

    add_product_name: function(){
      this.products.push({
        title: '',
        'type': '',
      });
    },

      change_step: function(step){
        jQuery('.summary__body ').removeClass('active');

        if(this.block_next){
          return;
        }


        switch (step){
          case 'next':
            var valid = this.validate(this.step);

            if(!valid){
              return;
            }

            if(this.step == 4 && this.notes.skip){
              this.step = 6;
              break;
            }
            this.step += 1;
            if(this.step == 8){
              this.place_order();
            }
            break;
          case 6:
            if(this.step >= 4){
              this.step = step;
            }
            break;
          case 'prev':

            if(this.step == 6 && this.notes.skip){
              this.step -= 2;
              break;
            }

            this.step -= 1;
            this.step = Math.max(1, this.step);
            break;
          default:

            if(step >= this.max_step){
             var valid = this.validate(this.step);
              if(!valid){
                return;
              }
              this.step = step;
            }else{
              this.step = step;
            }
            break;
          case 8:
            this.place_order();
            break;
        }

        console.log(this.step)
        this.max_step = Math.max(parseInt(this.step), this.max_step);
      },


    change_value_cb: function(val, key){
      this.notes.data[key].product = val;
    },

    change_product_type: function(data,key){
      this.products[key].type = data.val;
    },


    show_drop_address: function(){
      this.show_addresses_drop = !this.show_addresses_drop;

      jQuery('.address-wrapper').removeClass('error');
    },


    show_popup_address: function(){
      popup_address.visible = true;
    },


    check_product_name: function(key, value){
      var vm = this;
      vm.$refs['product-name'][key].classList.remove('error');
      var titles = vm.products.map(e=>{return e.title});
      var matches = titles.filter(e=>{ return e == value});
      if(matches.length > 1){
        vm.$refs['product-name'][key].classList.add('error');
        this.block_next = true;
      }else{
        vm.$refs['product-name'][key].classList.remove('error');
        this.block_next = false;
      }
    },

    handle_image_count: function(){
      var value = this.$refs.image_count_input.value;

      if(!/^[0-9|\-]+$/.test(value) && value.length != 0){
        this.$refs.image_count_input.classList.add('error');
        return;
      }else{
        this.$refs.image_count_input.classList.remove('error');
        value = Math.abs(parseInt(value));
      }

      this.image_count = value? value: '-';

      if(!isNaN(value)){
        this.$refs.image_count_input.value = value ;
      }
    },


      place_order: function(){

        console.log('place_order');
        var vm = this;

        var data = {
          customize: this.customize,
          notes: this.notes,
          turnaround: this.turnaround,
          handling: this.handling,
          products: this.products,
          image_count: this.image_count,
          product_id:  product_id[0],
          action: 'finish_shooting',
        };

        var form_data = jQuery('#checkout_form').serializeArray();

        for(var inf of form_data){
          data[inf.name] = inf.value;
        }

        jQuery.ajax({
          url: WP_URLS.wp_ajax_url,
          type: 'POST',
          dataType: 'json',
          data: data,
        })
        .done(function(e) {
          if(e.result == "failure"){
            var messages = e.messages.replace(/(<([^>]+)>)/gi, "");
            messages = messages.replace(/\r?\n/g, "");
            console.log(messages.trim());
            alert(messages.trim());
            return;
          }

          vm.order_placed = true;


          if(e.redirect){
            console.log('redirect')
            window.location.href  = e.redirect;
          }
        })
        .fail(function() {
          console.log("error");
        })
        .always(function(e) {
          console.log(e);
        });
      },

      place_order_trigger: function(){
        jQuery('#checkout_form').trigger('submit');
      },

    remove_error: function(slug, key, val){
       this.$refs[slug][key].classList.remove('error');
    },

    remove_note: function(key){
        this.notes.data.splice(key,1);
    },

    remove_product: function(key){
      this.products.splice(key,1);
    },

    set_notes: function(type){
      switch (type){
        case 'simple':
          this.notes.data = '';
          this.notes.skip = true;
          this.notes.type = 'simple';
          this.notes.title = this.simple_note;
          break;
        case 'custom':
          var product_name = this.products.length == 1? this.products[0].title : ''
          this.notes.skip = false;
          this.notes.title = 'Custom Shoot List';
          this.notes.type = 'custom';
          this.notes.data = [{product: product_name, text: '', show: 1}];
          break;
      }
    },

      validate: function(step){
        var vm = this;

        var valid = true;
        switch(step){
          case 1:
            for(var id in this.products){
              var product = this.products[id];
              valid = !product.title? false : valid;
              valid = !product.type? false : valid;

              if(!product.type){
                this.$refs.product_type[id].set_value('error',1);
              }else{
                this.$refs.product_type[id].set_value('error',0);
              }

              if(!product.title){
                vm.$refs['product-name'][id].classList.add('error');
              }else{
                vm.$refs['product-name'][id].classList.remove('error');
              }
            }
            break;
          case 2:
            valid = this.image_count == '-' || parseInt(this.image_count) <= 0? false : valid;

            if(!valid){
              jQuery('.photo_count').addClass('error');
            }else{
              jQuery('.photo_count').removeClass('error');
            }
            break;
          case 5:
            for(var id in this.notes.data){
              var note = this.notes.data[id];
              valid = !note.product? false : valid;
              valid = !note.text? false : valid;

              if(!note.product){
                this.$refs['notes-product'][id].$el.classList.add('error');
                this.notes.data[id].show = 1;

              }else{
                this.$refs['notes-product'][id].$el.classList.remove('error');
              }

              if(!note.text){
                this.$refs['notes-text'][id].classList.add('error');
                this.notes.data[id].show = 1;
              }else{
                this.$refs['notes-text'][id].classList.remove('error');
              }
            }
            break;
          case 7:
            valid = !this.selected_country && this.handling.send == 'free' ? false : valid;

            if(!valid){
              this.$refs.countries_select.error = 1;
            }

            valid = !this.collection_address && this.handling.send == 'free' ? false : valid;

            if(!this.collection_address && this.handling.send){
              jQuery('.address-wrapper').addClass('error');
            }


            break;
        }

        return valid;
      },


    show_drop_address: function(){
      this.show_addresses_drop = !this.show_addresses_drop;

      jQuery('.address-wrapper').removeClass('error');
    },


    show_popup_address: function(){
      popup_address.visible = true;
    },

    toggle_color_pref: function(color){
      if(this.customize.color_pref.indexOf(color) < 0){
        this.customize.color_pref.push(color);
      }else{
        var index = this.customize.color_pref.indexOf(color);
        this.customize.color_pref.splice(index,1);
      }
    },

    change_country: function(data){
      this.selected_country = data.val;
    },

  },
})
}
if(document.getElementById('my_gallery')){
  gallery_app = new Vue({
    el : '#my_gallery',

    mixins: [animation_mixin],

    mounted: function(){
      this.$el.classList.remove('visuallyhidden');
      this.get_stripe_key();

     this.$refs.images_scroll.style.width = (this.gallery_thumbs_filtered.length * 230) +'px';
    },

    data: {
      my_shoots: my_shoots,
      filter: 'all',
      date_start : false,
      date_end   : false,
      show_list: true,
    },

    watch: {
      date_end: function(val){
        if(val){
          var vm = this;
          Vue.nextTick(function(){
            vm.$refs.images_scroll.style.width = (vm.gallery_thumbs_filtered.length * 230) +'px';
          })
        }
      },

      date_start: function(val){
        if(val){
          var vm = this;
          Vue.nextTick(function(){
            vm.$refs.images_scroll.style.width = (vm.gallery_thumbs_filtered.length * 230) +'px';
          })
        }
      },

      filter: function(val){
        if(val){
          var vm = this;
          Vue.nextTick(function(){
            vm.$refs.images_scroll.style.width = (vm.gallery_thumbs_filtered.length * 230) +'px';
          })
        }
      },


    },

    computed: {

       gallery_thumbs: function(){
        var items = this.my_shoots.map(el=>{
          var thumbnails = Object.values(strip(el.thumbnails));

          var images = Object.values(el.images).map(img=>{
            var url_data = thumbnails.filter(th=>{return img.id == th.item_id})
            return {
              meta: img,
              date: el.date,
              url: 'undefined' !== typeof(url_data[0] )? url_data[0].attachment_url : DUMMY_S,
              order_id : el.order_id,
            };
          });

          return images;
        });

        var vm = this;
        var start = new Date(vm.date_start);
        var end   = new Date(vm.date_end);


        items = items.flat().filter(e=>{
          valid = true;
          if(vm.date_start && vm.date_start){
            var item_date = new Date(e.date);

            valid = (start > item_date || end < item_date)? false : valid;
          }

          return valid;
        });

        return items;
      },// gallery_thumbs

      gallery_thumbs_filtered: function(){
        var vm = this;

        var items = vm.gallery_thumbs.filter(e=>{
          valid = true;

          switch(vm.filter){

            case 'downloaded':
              return parseInt(e.meta.was_downloaded) == 1;
              break;

            case 'available':
              return parseInt(e.meta.was_downloaded) == 0 &&  parseInt(e.meta.is_active) == 1 ;
              break;

            case 'inreview':
              return parseInt(e.meta.is_active) == 0 && 'undefined' != typeof(e.meta.request) ;
              break;

            default:
              return true;
               break;
          }

        });



        return items;

      },//gallery_thumbs_filtered

      images_count: function(){
        var items = all_items = this.gallery_thumbs;

        var items_downloaded = items.filter(e=>{
          return parseInt(e.meta.was_downloaded) == 1;
        });

        var items_available = items.filter(e=>{
          return parseInt(e.meta.was_downloaded) == 0 &&  parseInt(e.meta.is_active) == 1 ;
        });

        var items_review = items.filter(e=>{
          return parseInt(e.meta.is_active) == 0 && 'undefined' != typeof(e.meta.request) ;
        });

        return{
          all: all_items.length,
          downloaded: items_downloaded.length,
          available: items_available.length,
          inreview: items_review.length,
        }
      }
    },

    methods: {
      change_dates_cb: function(event){
        this.date_start = event.start;
        this.date_end   = event.end;
      },

      get_stripe_key: function(){
        jQuery.ajax({
          url: WP_URLS.wp_ajax_url,
          type: 'POST',
          dataType: 'json',
          data: {action: 'get_stripe_keys'},
        })
        .done(function(e){
           theme_stripe = Stripe(e);
        })
      },


      images_update_cb: function(event){

        var index = this.my_shoots.findIndex(e=>{
          return e.order_id == event.order_id;
        })

        this.$set(this.my_shoots[index], 'images', event.images);
      },

      open_order: function(order_id){
        var vm = this;

        var meta = this.my_shoots.filter(e=>{
          return order_id == e.order_id;
        })

        meta = strip(meta[0]);

        vm.$refs.order_details._meta = meta;
        vm.$refs.order_details.show = true;

        Vue.nextTick(function(){
          vm.show_list = false;
        })
      },

      review_submited_cb: function(data){
        var order_index = this.my_shoots.findIndex(e=>{
          return data.order_id == e.order_id;
        });

        var image_index = this.my_shoots[order_index].images.findIndex(e=>{
          return data.imaged_id == e.id;
        });

        this.my_shoots[order_index].images[image_index].is_active = 0;
        this.my_shoots[order_index].images[image_index].request  = 1;
      }
    },

  });
}

function create_new_order(){
  if('undefined' !== typeof(frontdesk_order_new)){
    frontdesk_order_new.set_prop('visible', true);
  }

  if('undefined' !== typeof(frontdesk_list)){
    frontdesk_list.set_prop('visible', false);
    frontdesk_list.set_prop('selected_order_id', -1);
  }

  if('undefined' !== typeof(filters)){
    filters.set_prop('visible', false);
  }

  if('undefined' !== typeof(frontdesk_order)){
    frontdesk_order.set_prop('visible', false);
  }
}

function strip(val){
  return JSON.parse(JSON.stringify(val));
}

function ctime(label, color){
  if (theme_debug) {
    if(!color){
      color = 'blue';
    }
   console.group('%c '+label+' FINISHED', 'color:'+color);
   console.timeEnd(label);
   console.groupEnd();
  }
}

function slog(label, color, bg_color) {
  if (theme_debug) {
    if(!color){
      color = 'blue';
    }
    if(!bg_color){
      bg_color = '#fff';
    }
   console.group('%c '+ label , 'color:'+color+'; background: '+bg_color);
  }
}

function elog() {
  if (theme_debug) {
   console.groupEnd();
  }
}

function clog(value, color) {

    if(!color){
      color = 'black';
    }

  if (theme_debug) {

    if(typeof(value) === 'string'){
     console.log('%c ' + value , 'color:'+color);
    }else{
     console.log(value);
    }
  }
}

function block(){
  jQuery('.block-screen').addClass('shown')
}

function unblock(){
  jQuery('.block-screen').removeClass('shown')
}


function is_boolean(val){
  switch(typeof(val)){
    case 'boolean':
      return val;
      break;
    case 'string':
      if(val.toLowerCase() === 'false'){
        return false;
      }
      if(val.toLowerCase() === 'true'){
        return true;
      }
      return !!parseInt(val);
      break;
    case 'number':
      return !!parseInt(val);
      break;
    case 'undefined':
      return false;
      break;
  }
}

function init_recipe_carousel(){
  if(!jQuery('.recipe-gallery__items ').length){
    return;
  }
  jQuery('.recipe-gallery__counter .length').text(jQuery('.recipe-gallery__items img').length)

  var owl = jQuery('.recipe-gallery__items');

  owl.owlCarousel({
    autoWidth: true,
    margin: 15,
    dots: true,
    dotsContainer: '.recipe-dots'
  })
}


function init_recipe_preview_carousel(){
  if(!jQuery('.block-recipe__gallery').length){
    return;
  }

  jQuery('.block-recipe__gallery .inner').each(function(index, el) {
       /* iterate through array or object */
    var owl = jQuery(el);

    owl.owlCarousel({
      autoWidth: true,
      margin: 10,
    })

    owl.siblings('.ctrl').find('.prev').click(function(){
      owl.trigger('prev.owl.carousel');
    })
    owl.siblings('.ctrl').find('.next').click(function(){
      owl.trigger('next.owl.carousel');
    })
  });

}
jQuery(document).on('click', '.menu-switcher', function(){
  jQuery(this).toggleClass('active');
  jQuery('.mobile-menu ').toggleClass('active');
})

jQuery(document).on('click', '.summary__header', function(){
 jQuery(".summary__body").toggleClass('active');
 jQuery(".summary__header").toggleClass('active');
});

jQuery(document).on('click', '.summary__body .close', function(){
 jQuery(".summary__body").removeClass('active');
});


jQuery('.show-gallery-product').click(function(){

  jQuery('.single-product__gallery-overlay').addClass('shown');

  var images = jQuery('.single-product__gallery-overlay').find('img');

  jQuery('.single-product__gallery-overlay-body').masonry({
    itemSelector: '.single-product__gallery-item',
    percentPosition: true
  });

})

jQuery('.gallery-close').click(function(event) {
  jQuery('.single-product__gallery-overlay').removeClass('shown');
});


jQuery('.my-order__filter-item, .my-order__filter-item-2').click(function(event) {
  event.preventDefault();

  var obj = jQuery(this).closest('.my-order__filter');
  var width = jQuery(this).width();
  obj.find('.decoration.pre').width(width);
  obj.find('.decoration').width(width);

  var offset = jQuery(this).position().left;
  obj.find('.decoration.pre').css({'left': offset+'px'});
  obj.find('.decoration').css({'left': offset+'px'});
});

jQuery(document).ready(function(){
  jQuery('.my-order__filter').each(function(index, el) {
    var obj = jQuery(el);
    var width = obj.find('.active').width();
    jQuery(el).find('.decoration').width(width);
  });
})




jQuery('.my-order__filter-item').click(function(event) {
  event.preventDefault();
  jQuery('.my-order__filter-item').removeClass('active');
  jQuery(this).addClass('active');
  var target = jQuery(this).attr('href').replace('#','.');
  jQuery('.order-previews').addClass('hidden');

  var order_count = 0;

  jQuery(target).each(function(index, el) {
     if(!jQuery(el).hasClass('hiddendate')){
      jQuery(el).removeClass('hidden')
      order_count++;
     }
  });

 jQuery(document.body).trigger('update_order_scroll_width', order_count);

});

jQuery('.js-trigger-order-tab').click(function(event) {
  event.preventDefault();
  jQuery('.js-trigger-order-tab').removeClass('active');
  jQuery(this).addClass('active');
  var target = jQuery(this).attr('href');
  jQuery('.order-subpage').addClass('hidden');
  var order_count = 0;
  jQuery(target).removeClass('hidden');
});


function init_date_range(){
  var now     = new Date();
  var last_7  = new Date();
  var last_30  = new Date();
  var last_90 = new Date();
  last_7.setDate(last_7.getDate() - 7);
  last_30.setDate(last_30.getDate() - 30);
  last_90.setDate(last_7.getDate() - 90);

  var now     = new Date();

  var today_str = (now.getMonth() + 1) + '/' + now.getDate() + '/' + now.getFullYear();


  var last_7_str = (last_7.getMonth() + 1) + '/' + last_7.getDate() + '/' + last_7.getFullYear();

  var last_30_str = (last_30.getMonth() + 1) + '/' + last_30.getDate() + '/' + last_30.getFullYear();

  var last_90_str = (last_90.getMonth() + 1) + '/' + last_90.getDate() + '/' + last_90.getFullYear();

  var for_last_day = new Date(now.getFullYear(), now.getMonth() + 1, 0);

  var month_first_day = (now.getMonth() + 1) + '/' + 1 + '/' + now.getFullYear();

  var month_last_day = (now.getMonth() + 1) + '/' + for_last_day.getDate() + '/' + now.getFullYear();

  jQuery('.my-order__date-range-picker').daterangepicker({
    "autoApply": true,
    "ranges": {
        "Today": [
            today_str,
            today_str
        ],
        'This Month': [
          month_first_day,
          today_str
        ],

        'Past 7 Days': [
          last_7_str,
          today_str
        ],

        'Past 30 Days':[
          last_30_str,
          today_str
        ],

        'Past 90 Days': [
          last_90_str,
          today_str
        ],
        'All time':[
          '01/01/1999',
          today_str,
        ],
    },
    "alwaysShowCalendars": true,
    "startDate": '01/01/1999',
    "endDate": today_str
  }, function(start, end, label) {

    var text = start.format('MMM DD YYYY') + ' → ' + end.format('MMM DD YYYY');

    jQuery('.my-order__date-range-picker .label').text(label);
    jQuery('.my-order__date-range-picker .dates').text(text);

    var data = {from: start.format('MMM DD YYYY') , to: end.format('MMM DD YYYY'), label: label, _from: start.format('YYYY-MM-DD'), _to: end.format('YYYY-MM-DD'), }

    jQuery(document.body).trigger('filter_my_orders', data);

  });
}


jQuery(document.body).on('filter_my_orders', function(e, data){
  var _from = new Date(data._from+"T00:00:00");
  var _to = new Date(data._to+"T23:59:59");
  var orders = jQuery('.order-previews');

  orders.addClass('hidden');

  var count_completed  = 0;
  var count_processing = 0;

  var tabs = jQuery('.my-order__filter-item');
  var href = '';

  tabs.each(function(index, el) {
    if(jQuery(el).hasClass('active')){
      href = jQuery(el).attr('href').replace('#','');
    }
  });

  var order_count = 0;

  orders.each(function(index, el) {
    var date = new Date(jQuery(el).data('time'));

    if(date <= _to && date >= _from){

      if(jQuery(el).hasClass(href)){
        jQuery(el).removeClass('hidden');
        order_count++;
      }else{
        jQuery(el).addClass('hidden');
      }

      jQuery(el).removeClass('hiddendate');
      count_processing += jQuery(el).hasClass('processing')? 1 : 0;
      count_completed += jQuery(el).hasClass('completed')? 1 : 0;
    }else{
      jQuery(el).addClass('hidden');
      jQuery(el).addClass('hiddendate');
    }
  });


  jQuery(document.body).trigger('update_order_scroll_width', order_count);

  jQuery('[href=#processing] .count').text(count_processing);
  jQuery('[href=#completed] .count').text(count_completed);

})

jQuery(document.body).on('update_order_scroll_width',function(e,orders_count){
  var width = 280*orders_count;
  jQuery('#scroll-orders > .row').width(width).css({margin: 0});
})


jQuery('.trigger-expand').click(function(e) {
  e.preventDefault();
  var target = jQuery(this).data('target');

  jQuery('.trigger-expand:not([data-target='+target+'])').removeClass('active');
  jQuery('.resert-cells .details').slideUp();

  jQuery(this).toggleClass('active');
  jQuery('[data-parent='+target+']').slideToggle();
});


jQuery('.item-details').click(function(e) {
  e.preventDefault();

  if(jQuery(this).hasClass('toggled')){
    jQuery('.detail-notes').slideUp();
    jQuery('.trigger').removeClass('active');
  }else{
    var target = jQuery(this).data('shoot-target');
    jQuery('.detail-notes').slideUp();
    jQuery('.trigger').removeClass('active');
    jQuery(this).find('.trigger').toggleClass('active');
    jQuery('[data-shoot-parent='+target+']').slideDown();
  }

  jQuery(this).toggleClass('toggled');

});
jQuery(document).ready(function(){
  init_date_range();
  init_recipe_carousel();
  init_recipe_preview_carousel();
})